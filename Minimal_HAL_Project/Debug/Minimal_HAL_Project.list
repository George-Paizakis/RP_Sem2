
Minimal_HAL_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b38  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce8  08002ce8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002ce8  08002ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cf0  08002cf0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cf4  08002cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001b4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008227  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001702  00000000  00000000  00028302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006f8  00000000  00000000  00029a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000541  00000000  00000000  0002a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020df6  00000000  00000000  0002a641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000900f  00000000  00000000  0004b437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c41f2  00000000  00000000  00054446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002190  00000000  00000000  00118638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a4  00000000  00000000  0011a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ca8 	.word	0x08002ca8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08002ca8 	.word	0x08002ca8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
  * The developer is required to provide additional
  * configuration for the necessary features that will be enabled
  * for this application. Only the generated configuration is provided.
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
/* Configure and Init */
HAL_Init();
 80004c8:	f000 fa9c 	bl	8000a04 <HAL_Init>
SystemClock_Config();
 80004cc:	f000 f814 	bl	80004f8 <SystemClock_Config>
init_serial_io();
 80004d0:	f000 f9d2 	bl	8000878 <init_serial_io>
setvbuf(stdin, NULL, _IONBF, 0);
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <main+0x2c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6858      	ldr	r0, [r3, #4]
 80004da:	2300      	movs	r3, #0
 80004dc:	2202      	movs	r2, #2
 80004de:	2100      	movs	r1, #0
 80004e0:	f001 ff9e 	bl	8002420 <setvbuf>
printf("Hello World\r\n");
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <main+0x30>)
 80004e6:	f001 ff93 	bl	8002410 <puts>
return 0;
 80004ea:	2300      	movs	r3, #0
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000064 	.word	0x20000064
 80004f4:	08002cc0 	.word	0x08002cc0

080004f8 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 f910 	bl	800272c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <SystemClock_Config+0xcc>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <SystemClock_Config+0xd0>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000568:	2308      	movs	r3, #8
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800056c:	2332      	movs	r3, #50	; 0x32
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000574:	2307      	movs	r3, #7
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fd35 	bl	8000fec <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000588:	f000 f820 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000598:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800059e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2101      	movs	r1, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 ff96 	bl	80014dc <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005b6:	f000 f809 	bl	80005cc <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3750      	adds	r7, #80	; 0x50
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <HAL_MspInit+0x4c>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e6:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <HAL_MspInit+0x4c>)
 80005e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ec:	6453      	str	r3, [r2, #68]	; 0x44
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <HAL_MspInit+0x4c>)
 80005f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_MspInit+0x4c>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <HAL_MspInit+0x4c>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6413      	str	r3, [r2, #64]	; 0x40
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_MspInit+0x4c>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000616:	2007      	movs	r0, #7
 8000618:	f000 fb18 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800

08000628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a19      	ldr	r2, [pc, #100]	; (80006ac <HAL_UART_MspInit+0x84>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d12b      	bne.n	80006a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_UART_MspInit+0x88>)
 8000650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000652:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <HAL_UART_MspInit+0x88>)
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	6453      	str	r3, [r2, #68]	; 0x44
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_UART_MspInit+0x88>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	f003 0320 	and.w	r3, r3, #32
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_UART_MspInit+0x88>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <HAL_UART_MspInit+0x88>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_UART_MspInit+0x88>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000682:	23c0      	movs	r3, #192	; 0xc0
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000692:	2308      	movs	r3, #8
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_UART_MspInit+0x8c>)
 800069e:	f000 fb09 	bl	8000cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40011400 	.word	0x40011400
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020800 	.word	0x40020800

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f9d0 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	e00a      	b.n	8000734 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800071e:	f000 f903 	bl	8000928 <__io_getchar>
 8000722:	4601      	mov	r1, r0
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	60ba      	str	r2, [r7, #8]
 800072a:	b2ca      	uxtb	r2, r1
 800072c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	3301      	adds	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	dbf0      	blt.n	800071e <_read+0x12>
  }

  return len;
 800073c:	687b      	ldr	r3, [r7, #4]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b086      	sub	sp, #24
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	e009      	b.n	800076c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	60ba      	str	r2, [r7, #8]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f913 	bl	800098c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3301      	adds	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	dbf1      	blt.n	8000758 <_write+0x12>
  }
  return len;
 8000774:	687b      	ldr	r3, [r7, #4]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <_close>:

int _close(int file)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007a6:	605a      	str	r2, [r3, #4]
  return 0;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <_isatty>:

int _isatty(int file)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f001 ffd6 	bl	80027c8 <__errno>
 800081c:	4603      	mov	r3, r0
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_sbrk+0x64>)
 8000838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20020000 	.word	0x20020000
 8000848:	00000400 	.word	0x00000400
 800084c:	20000084 	.word	0x20000084
 8000850:	20000220 	.word	0x20000220

08000854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <init_serial_io>:
 * @param None
 * @retval None
 */

void init_serial_io()
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
/* Local Variables */
GPIO_InitTypeDef gpioInit;
/* Initialise Clocks */
__HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <init_serial_io+0xa0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a24      	ldr	r2, [pc, #144]	; (8000918 <init_serial_io+0xa0>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <init_serial_io+0xa0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_USART6_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <init_serial_io+0xa0>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a1d      	ldr	r2, [pc, #116]	; (8000918 <init_serial_io+0xa0>)
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <init_serial_io+0xa0>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f003 0320 	and.w	r3, r3, #32
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
/* Configure Pin Functionality */
gpioInit.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80008b6:	23c0      	movs	r3, #192	; 0xc0
 80008b8:	60fb      	str	r3, [r7, #12]
gpioInit.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	613b      	str	r3, [r7, #16]
gpioInit.Pull = GPIO_PULLUP;
 80008be:	2301      	movs	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
gpioInit.Speed = GPIO_SPEED_FAST;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
gpioInit.Alternate = GPIO_AF8_USART6;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOC, &gpioInit);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	4812      	ldr	r0, [pc, #72]	; (800091c <init_serial_io+0xa4>)
 80008d2:	f000 f9ef 	bl	8000cb4 <HAL_GPIO_Init>
/* Configure UART Functionality */
serialIO.Instance = USART6;
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <init_serial_io+0xa8>)
 80008d8:	4a12      	ldr	r2, [pc, #72]	; (8000924 <init_serial_io+0xac>)
 80008da:	601a      	str	r2, [r3, #0]
serialIO.Init.BaudRate = 115200;
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <init_serial_io+0xa8>)
 80008de:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e2:	605a      	str	r2, [r3, #4]
serialIO.Init.WordLength = UART_WORDLENGTH_8B;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <init_serial_io+0xa8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
serialIO.Init.StopBits = UART_STOPBITS_1;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <init_serial_io+0xa8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
serialIO.Init.Parity = UART_PARITY_NONE;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <init_serial_io+0xa8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
serialIO.Init.Mode = UART_MODE_TX_RX;
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <init_serial_io+0xa8>)
 80008f8:	220c      	movs	r2, #12
 80008fa:	615a      	str	r2, [r3, #20]
serialIO.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <init_serial_io+0xa8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
serialIO.Init.OverSampling = UART_OVERSAMPLING_16;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <init_serial_io+0xa8>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
HAL_UART_Init(&serialIO);
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <init_serial_io+0xa8>)
 800090a:	f001 f807 	bl	800191c <HAL_UART_Init>
}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40020800 	.word	0x40020800
 8000920:	20000088 	.word	0x20000088
 8000924:	40011400 	.word	0x40011400

08000928 <__io_getchar>:

int __io_getchar(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
/* Local Variable */
int ch = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
/* Clear the Overrun flag just before receiving the first character */
__HAL_UART_CLEAR_OREFLAG(&serialIO);
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <__io_getchar+0x60>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <__io_getchar+0x60>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]
/* Wait for reception of a character on the USART RX line and echo this
* character on console */
HAL_UART_Receive(&serialIO, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000948:	1d39      	adds	r1, r7, #4
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	2201      	movs	r2, #1
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <__io_getchar+0x60>)
 8000952:	f001 f8c2 	bl	8001ada <HAL_UART_Receive>
if(ch == '\r')
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b0d      	cmp	r3, #13
 800095a:	d108      	bne.n	800096e <__io_getchar+0x46>
{
HAL_UART_Transmit(&serialIO, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800095c:	1d39      	adds	r1, r7, #4
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	2201      	movs	r2, #1
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <__io_getchar+0x60>)
 8000966:	f001 f826 	bl	80019b6 <HAL_UART_Transmit>
ch = '\n';
 800096a:	230a      	movs	r3, #10
 800096c:	607b      	str	r3, [r7, #4]
}
HAL_UART_Transmit(&serialIO, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800096e:	1d39      	adds	r1, r7, #4
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	2201      	movs	r2, #1
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <__io_getchar+0x60>)
 8000978:	f001 f81d 	bl	80019b6 <HAL_UART_Transmit>
return ch;
 800097c:	687b      	ldr	r3, [r7, #4]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000088 	.word	0x20000088

0800098c <__io_putchar>:

int __io_putchar(int ch)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&serialIO, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000994:	1d39      	adds	r1, r7, #4
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	2201      	movs	r2, #1
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <__io_putchar+0x20>)
 800099e:	f001 f80a 	bl	80019b6 <HAL_UART_Transmit>
return ch;
 80009a2:	687b      	ldr	r3, [r7, #4]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000088 	.word	0x20000088

080009b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009b6:	490e      	ldr	r1, [pc, #56]	; (80009f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009cc:	4c0b      	ldr	r4, [pc, #44]	; (80009fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009da:	f7ff ff3b 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009de:	f001 fef9 	bl	80027d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e2:	f7ff fd6f 	bl	80004c4 <main>
  bx  lr    
 80009e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009f4:	08002cf8 	.word	0x08002cf8
  ldr r2, =_sbss
 80009f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009fc:	2000021c 	.word	0x2000021c

08000a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC_IRQHandler>
	...

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <HAL_Init+0x40>)
 8000a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_Init+0x40>)
 8000a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_Init+0x40>)
 8000a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f90d 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f808 	bl	8000a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a38:	f7ff fdce 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023c00 	.word	0x40023c00

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_InitTick+0x54>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x58>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f917 	bl	8000c9a <HAL_SYSTICK_Config>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00e      	b.n	8000a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d80a      	bhi.n	8000a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f000 f8ed 	bl	8000c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <HAL_InitTick+0x5c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x24>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <HAL_IncTick+0x24>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	200000cc 	.word	0x200000cc

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <HAL_GetTick+0x14>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	200000cc 	.word	0x200000cc

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c18:	d301      	bcc.n	8000c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00f      	b.n	8000c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <SysTick_Config+0x40>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c26:	210f      	movs	r1, #15
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f7ff ff8e 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_Config+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x40>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff47 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c74:	f7ff ff5c 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff8e 	bl	8000ba0 <NVIC_EncodePriority>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffb0 	bl	8000c08 <SysTick_Config>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
 8000cce:	e16b      	b.n	8000fa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f040 815a 	bne.w	8000fa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d005      	beq.n	8000d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d130      	bne.n	8000d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	68da      	ldr	r2, [r3, #12]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	091b      	lsrs	r3, r3, #4
 8000d52:	f003 0201 	and.w	r2, r3, #1
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d017      	beq.n	8000da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d123      	bne.n	8000df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	08da      	lsrs	r2, r3, #3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3208      	adds	r2, #8
 8000df2:	69b9      	ldr	r1, [r7, #24]
 8000df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0203 	and.w	r2, r3, #3
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 80b4 	beq.w	8000fa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b60      	ldr	r3, [pc, #384]	; (8000fc0 <HAL_GPIO_Init+0x30c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a5f      	ldr	r2, [pc, #380]	; (8000fc0 <HAL_GPIO_Init+0x30c>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <HAL_GPIO_Init+0x30c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e56:	4a5b      	ldr	r2, [pc, #364]	; (8000fc4 <HAL_GPIO_Init+0x310>)
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a52      	ldr	r2, [pc, #328]	; (8000fc8 <HAL_GPIO_Init+0x314>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d02b      	beq.n	8000eda <HAL_GPIO_Init+0x226>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <HAL_GPIO_Init+0x318>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d025      	beq.n	8000ed6 <HAL_GPIO_Init+0x222>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a50      	ldr	r2, [pc, #320]	; (8000fd0 <HAL_GPIO_Init+0x31c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d01f      	beq.n	8000ed2 <HAL_GPIO_Init+0x21e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4f      	ldr	r2, [pc, #316]	; (8000fd4 <HAL_GPIO_Init+0x320>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d019      	beq.n	8000ece <HAL_GPIO_Init+0x21a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4e      	ldr	r2, [pc, #312]	; (8000fd8 <HAL_GPIO_Init+0x324>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0x216>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4d      	ldr	r2, [pc, #308]	; (8000fdc <HAL_GPIO_Init+0x328>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_GPIO_Init+0x212>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <HAL_GPIO_Init+0x32c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x20e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4b      	ldr	r2, [pc, #300]	; (8000fe4 <HAL_GPIO_Init+0x330>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_GPIO_Init+0x20a>
 8000eba:	2307      	movs	r3, #7
 8000ebc:	e00e      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	e00c      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ec2:	2306      	movs	r3, #6
 8000ec4:	e00a      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000eda:	2300      	movs	r3, #0
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eec:	4935      	ldr	r1, [pc, #212]	; (8000fc4 <HAL_GPIO_Init+0x310>)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efa:	4b3b      	ldr	r3, [pc, #236]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1e:	4a32      	ldr	r2, [pc, #200]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f24:	4b30      	ldr	r3, [pc, #192]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f48:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f72:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	f67f ae90 	bls.w	8000cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40021c00 	.word	0x40021c00
 8000fe8:	40013c00 	.word	0x40013c00

08000fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e267      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d075      	beq.n	80010f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800100a:	4b88      	ldr	r3, [pc, #544]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b04      	cmp	r3, #4
 8001014:	d00c      	beq.n	8001030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001016:	4b85      	ldr	r3, [pc, #532]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800101e:	2b08      	cmp	r3, #8
 8001020:	d112      	bne.n	8001048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001022:	4b82      	ldr	r3, [pc, #520]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800102e:	d10b      	bne.n	8001048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	4b7e      	ldr	r3, [pc, #504]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d05b      	beq.n	80010f4 <HAL_RCC_OscConfig+0x108>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d157      	bne.n	80010f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e242      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001050:	d106      	bne.n	8001060 <HAL_RCC_OscConfig+0x74>
 8001052:	4b76      	ldr	r3, [pc, #472]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a75      	ldr	r2, [pc, #468]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e01d      	b.n	800109c <HAL_RCC_OscConfig+0xb0>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x98>
 800106a:	4b70      	ldr	r3, [pc, #448]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a6f      	ldr	r2, [pc, #444]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b6d      	ldr	r3, [pc, #436]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6c      	ldr	r2, [pc, #432]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e00b      	b.n	800109c <HAL_RCC_OscConfig+0xb0>
 8001084:	4b69      	ldr	r3, [pc, #420]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a68      	ldr	r2, [pc, #416]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800108a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b66      	ldr	r3, [pc, #408]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a65      	ldr	r2, [pc, #404]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fd14 	bl	8000ad0 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fd10 	bl	8000ad0 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e207      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b5b      	ldr	r3, [pc, #364]	; (800122c <HAL_RCC_OscConfig+0x240>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0xc0>
 80010ca:	e014      	b.n	80010f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fd00 	bl	8000ad0 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fcfc 	bl	8000ad0 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e1f3      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	4b51      	ldr	r3, [pc, #324]	; (800122c <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0xe8>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d063      	beq.n	80011ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001102:	4b4a      	ldr	r3, [pc, #296]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00b      	beq.n	8001126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001116:	2b08      	cmp	r3, #8
 8001118:	d11c      	bne.n	8001154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111a:	4b44      	ldr	r3, [pc, #272]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d116      	bne.n	8001154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <HAL_RCC_OscConfig+0x152>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d001      	beq.n	800113e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e1c7      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4937      	ldr	r1, [pc, #220]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	e03a      	b.n	80011ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115c:	4b34      	ldr	r3, [pc, #208]	; (8001230 <HAL_RCC_OscConfig+0x244>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001162:	f7ff fcb5 	bl	8000ad0 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fcb1 	bl	8000ad0 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e1a8      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4925      	ldr	r1, [pc, #148]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
 800119c:	e015      	b.n	80011ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <HAL_RCC_OscConfig+0x244>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a4:	f7ff fc94 	bl	8000ad0 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc90 	bl	8000ad0 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e187      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d036      	beq.n	8001244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d016      	beq.n	800120c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_RCC_OscConfig+0x248>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff fc74 	bl	8000ad0 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ec:	f7ff fc70 	bl	8000ad0 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e167      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x200>
 800120a:	e01b      	b.n	8001244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_RCC_OscConfig+0x248>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff fc5d 	bl	8000ad0 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	e00e      	b.n	8001238 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff fc59 	bl	8000ad0 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d907      	bls.n	8001238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e150      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
 800122c:	40023800 	.word	0x40023800
 8001230:	42470000 	.word	0x42470000
 8001234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001238:	4b88      	ldr	r3, [pc, #544]	; (800145c <HAL_RCC_OscConfig+0x470>)
 800123a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1ea      	bne.n	800121a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8097 	beq.w	8001380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001256:	4b81      	ldr	r3, [pc, #516]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10f      	bne.n	8001282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b7d      	ldr	r3, [pc, #500]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a7c      	ldr	r2, [pc, #496]	; (800145c <HAL_RCC_OscConfig+0x470>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b7a      	ldr	r3, [pc, #488]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127e:	2301      	movs	r3, #1
 8001280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	4b77      	ldr	r3, [pc, #476]	; (8001460 <HAL_RCC_OscConfig+0x474>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d118      	bne.n	80012c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128e:	4b74      	ldr	r3, [pc, #464]	; (8001460 <HAL_RCC_OscConfig+0x474>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a73      	ldr	r2, [pc, #460]	; (8001460 <HAL_RCC_OscConfig+0x474>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129a:	f7ff fc19 	bl	8000ad0 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a2:	f7ff fc15 	bl	8000ad0 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e10c      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <HAL_RCC_OscConfig+0x474>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x2ea>
 80012c8:	4b64      	ldr	r3, [pc, #400]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012cc:	4a63      	ldr	r2, [pc, #396]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6713      	str	r3, [r2, #112]	; 0x70
 80012d4:	e01c      	b.n	8001310 <HAL_RCC_OscConfig+0x324>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b05      	cmp	r3, #5
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x30c>
 80012de:	4b5f      	ldr	r3, [pc, #380]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e2:	4a5e      	ldr	r2, [pc, #376]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6713      	str	r3, [r2, #112]	; 0x70
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ee:	4a5b      	ldr	r2, [pc, #364]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6713      	str	r3, [r2, #112]	; 0x70
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0x324>
 80012f8:	4b58      	ldr	r3, [pc, #352]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fc:	4a57      	ldr	r2, [pc, #348]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	6713      	str	r3, [r2, #112]	; 0x70
 8001304:	4b55      	ldr	r3, [pc, #340]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001308:	4a54      	ldr	r2, [pc, #336]	; (800145c <HAL_RCC_OscConfig+0x470>)
 800130a:	f023 0304 	bic.w	r3, r3, #4
 800130e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d015      	beq.n	8001344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001318:	f7ff fbda 	bl	8000ad0 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131e:	e00a      	b.n	8001336 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001320:	f7ff fbd6 	bl	8000ad0 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	f241 3288 	movw	r2, #5000	; 0x1388
 800132e:	4293      	cmp	r3, r2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e0cb      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001336:	4b49      	ldr	r3, [pc, #292]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0ee      	beq.n	8001320 <HAL_RCC_OscConfig+0x334>
 8001342:	e014      	b.n	800136e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fbc4 	bl	8000ad0 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134a:	e00a      	b.n	8001362 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134c:	f7ff fbc0 	bl	8000ad0 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e0b5      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001362:	4b3e      	ldr	r3, [pc, #248]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1ee      	bne.n	800134c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d105      	bne.n	8001380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a38      	ldr	r2, [pc, #224]	; (800145c <HAL_RCC_OscConfig+0x470>)
 800137a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80a1 	beq.w	80014cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800138a:	4b34      	ldr	r3, [pc, #208]	; (800145c <HAL_RCC_OscConfig+0x470>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b08      	cmp	r3, #8
 8001394:	d05c      	beq.n	8001450 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d141      	bne.n	8001422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_RCC_OscConfig+0x478>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb94 	bl	8000ad0 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fb90 	bl	8000ad0 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e087      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69da      	ldr	r2, [r3, #28]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	019b      	lsls	r3, r3, #6
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	085b      	lsrs	r3, r3, #1
 80013e2:	3b01      	subs	r3, #1
 80013e4:	041b      	lsls	r3, r3, #16
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	491b      	ldr	r1, [pc, #108]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_RCC_OscConfig+0x478>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb69 	bl	8000ad0 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff fb65 	bl	8000ad0 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e05c      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x416>
 8001420:	e054      	b.n	80014cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_RCC_OscConfig+0x478>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb52 	bl	8000ad0 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fb4e 	bl	8000ad0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e045      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x444>
 800144e:	e03d      	b.n	80014cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d107      	bne.n	8001468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e038      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000
 8001464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x4ec>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d028      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001480:	429a      	cmp	r2, r3
 8001482:	d121      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d11a      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001498:	4013      	ands	r3, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800149e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d111      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	3b01      	subs	r3, #1
 80014b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d107      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0cc      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d90c      	bls.n	8001518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b65      	ldr	r3, [pc, #404]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b63      	ldr	r3, [pc, #396]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0b8      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001530:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a58      	ldr	r2, [pc, #352]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800153a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001554:	4b50      	ldr	r3, [pc, #320]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	494d      	ldr	r1, [pc, #308]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d044      	beq.n	80015fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d107      	bne.n	800158a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e07f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d003      	beq.n	800159a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001596:	2b03      	cmp	r3, #3
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e067      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f023 0203 	bic.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4934      	ldr	r1, [pc, #208]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015cc:	f7ff fa80 	bl	8000ad0 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d4:	f7ff fa7c 	bl	8000ad0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e04f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 020c 	and.w	r2, r3, #12
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d1eb      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d20c      	bcs.n	8001624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e032      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4916      	ldr	r1, [pc, #88]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	490e      	ldr	r1, [pc, #56]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001662:	f000 f821 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 8001666:	4602      	mov	r2, r0
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	490a      	ldr	r1, [pc, #40]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 8001674:	5ccb      	ldrb	r3, [r1, r3]
 8001676:	fa22 f303 	lsr.w	r3, r2, r3
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f9e0 	bl	8000a48 <HAL_InitTick>

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00
 8001698:	40023800 	.word	0x40023800
 800169c:	08002cd0 	.word	0x08002cd0
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ac:	b094      	sub	sp, #80	; 0x50
 80016ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	647b      	str	r3, [r7, #68]	; 0x44
 80016b4:	2300      	movs	r3, #0
 80016b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b8:	2300      	movs	r3, #0
 80016ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016c0:	4b79      	ldr	r3, [pc, #484]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d00d      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0x40>
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	f200 80e1 	bhi.w	8001894 <HAL_RCC_GetSysClockFreq+0x1ec>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x34>
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d003      	beq.n	80016e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80016da:	e0db      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016dc:	4b73      	ldr	r3, [pc, #460]	; (80018ac <HAL_RCC_GetSysClockFreq+0x204>)
 80016de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80016e0:	e0db      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016e2:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80016e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80016e6:	e0d8      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016e8:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016f2:	4b6d      	ldr	r3, [pc, #436]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d063      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016fe:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	099b      	lsrs	r3, r3, #6
 8001704:	2200      	movs	r2, #0
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
 8001708:	63fa      	str	r2, [r7, #60]	; 0x3c
 800170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800170c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
 8001716:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800171a:	4622      	mov	r2, r4
 800171c:	462b      	mov	r3, r5
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	0159      	lsls	r1, r3, #5
 8001728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800172c:	0150      	lsls	r0, r2, #5
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4621      	mov	r1, r4
 8001734:	1a51      	subs	r1, r2, r1
 8001736:	6139      	str	r1, [r7, #16]
 8001738:	4629      	mov	r1, r5
 800173a:	eb63 0301 	sbc.w	r3, r3, r1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800174c:	4659      	mov	r1, fp
 800174e:	018b      	lsls	r3, r1, #6
 8001750:	4651      	mov	r1, sl
 8001752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001756:	4651      	mov	r1, sl
 8001758:	018a      	lsls	r2, r1, #6
 800175a:	4651      	mov	r1, sl
 800175c:	ebb2 0801 	subs.w	r8, r2, r1
 8001760:	4659      	mov	r1, fp
 8001762:	eb63 0901 	sbc.w	r9, r3, r1
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800177a:	4690      	mov	r8, r2
 800177c:	4699      	mov	r9, r3
 800177e:	4623      	mov	r3, r4
 8001780:	eb18 0303 	adds.w	r3, r8, r3
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	462b      	mov	r3, r5
 8001788:	eb49 0303 	adc.w	r3, r9, r3
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800179a:	4629      	mov	r1, r5
 800179c:	024b      	lsls	r3, r1, #9
 800179e:	4621      	mov	r1, r4
 80017a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017a4:	4621      	mov	r1, r4
 80017a6:	024a      	lsls	r2, r1, #9
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ae:	2200      	movs	r2, #0
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017b8:	f7fe fd06 	bl	80001c8 <__aeabi_uldivmod>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4613      	mov	r3, r2
 80017c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017c4:	e058      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c6:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	099b      	lsrs	r3, r3, #6
 80017cc:	2200      	movs	r2, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	4611      	mov	r1, r2
 80017d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
 80017dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017e0:	4642      	mov	r2, r8
 80017e2:	464b      	mov	r3, r9
 80017e4:	f04f 0000 	mov.w	r0, #0
 80017e8:	f04f 0100 	mov.w	r1, #0
 80017ec:	0159      	lsls	r1, r3, #5
 80017ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f2:	0150      	lsls	r0, r2, #5
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4641      	mov	r1, r8
 80017fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80017fe:	4649      	mov	r1, r9
 8001800:	eb63 0b01 	sbc.w	fp, r3, r1
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001810:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001814:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001818:	ebb2 040a 	subs.w	r4, r2, sl
 800181c:	eb63 050b 	sbc.w	r5, r3, fp
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	00eb      	lsls	r3, r5, #3
 800182a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800182e:	00e2      	lsls	r2, r4, #3
 8001830:	4614      	mov	r4, r2
 8001832:	461d      	mov	r5, r3
 8001834:	4643      	mov	r3, r8
 8001836:	18e3      	adds	r3, r4, r3
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	464b      	mov	r3, r9
 800183c:	eb45 0303 	adc.w	r3, r5, r3
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800184e:	4629      	mov	r1, r5
 8001850:	028b      	lsls	r3, r1, #10
 8001852:	4621      	mov	r1, r4
 8001854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001858:	4621      	mov	r1, r4
 800185a:	028a      	lsls	r2, r1, #10
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001862:	2200      	movs	r2, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	61fa      	str	r2, [r7, #28]
 8001868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800186c:	f7fe fcac 	bl	80001c8 <__aeabi_uldivmod>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4613      	mov	r3, r2
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800188a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001892:	e002      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_GetSysClockFreq+0x204>)
 8001896:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800189c:	4618      	mov	r0, r3
 800189e:	3750      	adds	r7, #80	; 0x50
 80018a0:	46bd      	mov	sp, r7
 80018a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	00f42400 	.word	0x00f42400
 80018b0:	007a1200 	.word	0x007a1200

080018b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000000 	.word	0x20000000

080018cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d0:	f7ff fff0 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	0a9b      	lsrs	r3, r3, #10
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	4903      	ldr	r1, [pc, #12]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	08002ce0 	.word	0x08002ce0

080018f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018f8:	f7ff ffdc 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0b5b      	lsrs	r3, r3, #13
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	08002ce0 	.word	0x08002ce0

0800191c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e03f      	b.n	80019ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7fe fe70 	bl	8000628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2224      	movs	r2, #36	; 0x24
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800195e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f9cb 	bl	8001cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	695a      	ldr	r2, [r3, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b08a      	sub	sp, #40	; 0x28
 80019ba:	af02      	add	r7, sp, #8
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4613      	mov	r3, r2
 80019c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b20      	cmp	r3, #32
 80019d4:	d17c      	bne.n	8001ad0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <HAL_UART_Transmit+0x2c>
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e075      	b.n	8001ad2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_UART_Transmit+0x3e>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e06e      	b.n	8001ad2 <HAL_UART_Transmit+0x11c>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2221      	movs	r2, #33	; 0x21
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a0a:	f7ff f861 	bl	8000ad0 <HAL_GetTick>
 8001a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	88fa      	ldrh	r2, [r7, #6]
 8001a14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	88fa      	ldrh	r2, [r7, #6]
 8001a1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a24:	d108      	bne.n	8001a38 <HAL_UART_Transmit+0x82>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d104      	bne.n	8001a38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	e003      	b.n	8001a40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a48:	e02a      	b.n	8001aa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2200      	movs	r2, #0
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f8e2 	bl	8001c1e <UART_WaitOnFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e036      	b.n	8001ad2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10b      	bne.n	8001a82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	e007      	b.n	8001a92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1cf      	bne.n	8001a4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f8b2 	bl	8001c1e <UART_WaitOnFlagUntilTimeout>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e006      	b.n	8001ad2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e000      	b.n	8001ad2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ad0:	2302      	movs	r3, #2
  }
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b08a      	sub	sp, #40	; 0x28
 8001ade:	af02      	add	r7, sp, #8
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	f040 808c 	bne.w	8001c14 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_UART_Receive+0x2e>
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e084      	b.n	8001c16 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_UART_Receive+0x40>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e07d      	b.n	8001c16 <HAL_UART_Receive+0x13c>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2222      	movs	r2, #34	; 0x22
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b36:	f7fe ffcb 	bl	8000ad0 <HAL_GetTick>
 8001b3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	88fa      	ldrh	r2, [r7, #6]
 8001b40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	88fa      	ldrh	r2, [r7, #6]
 8001b46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b50:	d108      	bne.n	8001b64 <HAL_UART_Receive+0x8a>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	e003      	b.n	8001b6c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001b74:	e043      	b.n	8001bfe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2120      	movs	r1, #32
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f84c 	bl	8001c1e <UART_WaitOnFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e042      	b.n	8001c16 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	3302      	adds	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	e01f      	b.n	8001bf0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb8:	d007      	beq.n	8001bca <HAL_UART_Receive+0xf0>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10a      	bne.n	8001bd8 <HAL_UART_Receive+0xfe>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	e008      	b.n	8001bea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3301      	adds	r3, #1
 8001bee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1b6      	bne.n	8001b76 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e000      	b.n	8001c16 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
  }
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b090      	sub	sp, #64	; 0x40
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c2e:	e050      	b.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c36:	d04c      	beq.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <UART_WaitOnFlagUntilTimeout+0x30>
 8001c3e:	f7fe ff47 	bl	8000ad0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d241      	bcs.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	330c      	adds	r3, #12
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	e853 3f00 	ldrex	r3, [r3]
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	330c      	adds	r3, #12
 8001c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c6e:	637a      	str	r2, [r7, #52]	; 0x34
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c76:	e841 2300 	strex	r3, r2, [r1]
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1e5      	bne.n	8001c4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3314      	adds	r3, #20
 8001c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	e853 3f00 	ldrex	r3, [r3]
 8001c90:	613b      	str	r3, [r7, #16]
   return(result);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3314      	adds	r3, #20
 8001ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ca2:	623a      	str	r2, [r7, #32]
 8001ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca6:	69f9      	ldr	r1, [r7, #28]
 8001ca8:	6a3a      	ldr	r2, [r7, #32]
 8001caa:	e841 2300 	strex	r3, r2, [r1]
 8001cae:	61bb      	str	r3, [r7, #24]
   return(result);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1e5      	bne.n	8001c82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e00f      	b.n	8001cf2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d09f      	beq.n	8001c30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3740      	adds	r7, #64	; 0x40
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d00:	b0c0      	sub	sp, #256	; 0x100
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	ea40 0301 	orr.w	r3, r0, r1
 8001d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d54:	f021 010c 	bic.w	r1, r1, #12
 8001d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d62:	430b      	orrs	r3, r1
 8001d64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d76:	6999      	ldr	r1, [r3, #24]
 8001d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	ea40 0301 	orr.w	r3, r0, r1
 8001d82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b8f      	ldr	r3, [pc, #572]	; (8001fc8 <UART_SetConfig+0x2cc>)
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d005      	beq.n	8001d9c <UART_SetConfig+0xa0>
 8001d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b8d      	ldr	r3, [pc, #564]	; (8001fcc <UART_SetConfig+0x2d0>)
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d104      	bne.n	8001da6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d9c:	f7ff fdaa 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 8001da0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001da4:	e003      	b.n	8001dae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001da6:	f7ff fd91 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8001daa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db8:	f040 810c 	bne.w	8001fd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001dc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001dca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001dce:	4622      	mov	r2, r4
 8001dd0:	462b      	mov	r3, r5
 8001dd2:	1891      	adds	r1, r2, r2
 8001dd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001dd6:	415b      	adcs	r3, r3
 8001dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dde:	4621      	mov	r1, r4
 8001de0:	eb12 0801 	adds.w	r8, r2, r1
 8001de4:	4629      	mov	r1, r5
 8001de6:	eb43 0901 	adc.w	r9, r3, r1
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dfe:	4690      	mov	r8, r2
 8001e00:	4699      	mov	r9, r3
 8001e02:	4623      	mov	r3, r4
 8001e04:	eb18 0303 	adds.w	r3, r8, r3
 8001e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e0c:	462b      	mov	r3, r5
 8001e0e:	eb49 0303 	adc.w	r3, r9, r3
 8001e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	18db      	adds	r3, r3, r3
 8001e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8001e30:	4613      	mov	r3, r2
 8001e32:	eb42 0303 	adc.w	r3, r2, r3
 8001e36:	657b      	str	r3, [r7, #84]	; 0x54
 8001e38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e40:	f7fe f9c2 	bl	80001c8 <__aeabi_uldivmod>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4b61      	ldr	r3, [pc, #388]	; (8001fd0 <UART_SetConfig+0x2d4>)
 8001e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	011c      	lsls	r4, r3, #4
 8001e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e56:	2200      	movs	r2, #0
 8001e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001e64:	4642      	mov	r2, r8
 8001e66:	464b      	mov	r3, r9
 8001e68:	1891      	adds	r1, r2, r2
 8001e6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e6c:	415b      	adcs	r3, r3
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e74:	4641      	mov	r1, r8
 8001e76:	eb12 0a01 	adds.w	sl, r2, r1
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	eb43 0b01 	adc.w	fp, r3, r1
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e94:	4692      	mov	sl, r2
 8001e96:	469b      	mov	fp, r3
 8001e98:	4643      	mov	r3, r8
 8001e9a:	eb1a 0303 	adds.w	r3, sl, r3
 8001e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001eb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001ebc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	18db      	adds	r3, r3, r3
 8001ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	eb42 0303 	adc.w	r3, r2, r3
 8001ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ed2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ed6:	f7fe f977 	bl	80001c8 <__aeabi_uldivmod>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <UART_SetConfig+0x2d4>)
 8001ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2264      	movs	r2, #100	; 0x64
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	1acb      	subs	r3, r1, r3
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001ef6:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <UART_SetConfig+0x2d4>)
 8001ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f04:	441c      	add	r4, r3
 8001f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f18:	4642      	mov	r2, r8
 8001f1a:	464b      	mov	r3, r9
 8001f1c:	1891      	adds	r1, r2, r2
 8001f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f20:	415b      	adcs	r3, r3
 8001f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f28:	4641      	mov	r1, r8
 8001f2a:	1851      	adds	r1, r2, r1
 8001f2c:	6339      	str	r1, [r7, #48]	; 0x30
 8001f2e:	4649      	mov	r1, r9
 8001f30:	414b      	adcs	r3, r1
 8001f32:	637b      	str	r3, [r7, #52]	; 0x34
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001f40:	4659      	mov	r1, fp
 8001f42:	00cb      	lsls	r3, r1, #3
 8001f44:	4651      	mov	r1, sl
 8001f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f4a:	4651      	mov	r1, sl
 8001f4c:	00ca      	lsls	r2, r1, #3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	4642      	mov	r2, r8
 8001f56:	189b      	adds	r3, r3, r2
 8001f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f5c:	464b      	mov	r3, r9
 8001f5e:	460a      	mov	r2, r1
 8001f60:	eb42 0303 	adc.w	r3, r2, r3
 8001f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	18db      	adds	r3, r3, r3
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f82:	4613      	mov	r3, r2
 8001f84:	eb42 0303 	adc.w	r3, r2, r3
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f92:	f7fe f919 	bl	80001c8 <__aeabi_uldivmod>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <UART_SetConfig+0x2d4>)
 8001f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	2164      	movs	r1, #100	; 0x64
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	3332      	adds	r3, #50	; 0x32
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <UART_SetConfig+0x2d4>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	095b      	lsrs	r3, r3, #5
 8001fb6:	f003 0207 	and.w	r2, r3, #7
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4422      	add	r2, r4
 8001fc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fc4:	e106      	b.n	80021d4 <UART_SetConfig+0x4d8>
 8001fc6:	bf00      	nop
 8001fc8:	40011000 	.word	0x40011000
 8001fcc:	40011400 	.word	0x40011400
 8001fd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001fde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001fe2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001fe6:	4642      	mov	r2, r8
 8001fe8:	464b      	mov	r3, r9
 8001fea:	1891      	adds	r1, r2, r2
 8001fec:	6239      	str	r1, [r7, #32]
 8001fee:	415b      	adcs	r3, r3
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ff6:	4641      	mov	r1, r8
 8001ff8:	1854      	adds	r4, r2, r1
 8001ffa:	4649      	mov	r1, r9
 8001ffc:	eb43 0501 	adc.w	r5, r3, r1
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	00eb      	lsls	r3, r5, #3
 800200a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800200e:	00e2      	lsls	r2, r4, #3
 8002010:	4614      	mov	r4, r2
 8002012:	461d      	mov	r5, r3
 8002014:	4643      	mov	r3, r8
 8002016:	18e3      	adds	r3, r4, r3
 8002018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800201c:	464b      	mov	r3, r9
 800201e:	eb45 0303 	adc.w	r3, r5, r3
 8002022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002032:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002042:	4629      	mov	r1, r5
 8002044:	008b      	lsls	r3, r1, #2
 8002046:	4621      	mov	r1, r4
 8002048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800204c:	4621      	mov	r1, r4
 800204e:	008a      	lsls	r2, r1, #2
 8002050:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002054:	f7fe f8b8 	bl	80001c8 <__aeabi_uldivmod>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4b60      	ldr	r3, [pc, #384]	; (80021e0 <UART_SetConfig+0x4e4>)
 800205e:	fba3 2302 	umull	r2, r3, r3, r2
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	011c      	lsls	r4, r3, #4
 8002066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800206a:	2200      	movs	r2, #0
 800206c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002074:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002078:	4642      	mov	r2, r8
 800207a:	464b      	mov	r3, r9
 800207c:	1891      	adds	r1, r2, r2
 800207e:	61b9      	str	r1, [r7, #24]
 8002080:	415b      	adcs	r3, r3
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002088:	4641      	mov	r1, r8
 800208a:	1851      	adds	r1, r2, r1
 800208c:	6139      	str	r1, [r7, #16]
 800208e:	4649      	mov	r1, r9
 8002090:	414b      	adcs	r3, r1
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020a0:	4659      	mov	r1, fp
 80020a2:	00cb      	lsls	r3, r1, #3
 80020a4:	4651      	mov	r1, sl
 80020a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020aa:	4651      	mov	r1, sl
 80020ac:	00ca      	lsls	r2, r1, #3
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	4642      	mov	r2, r8
 80020b6:	189b      	adds	r3, r3, r2
 80020b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020bc:	464b      	mov	r3, r9
 80020be:	460a      	mov	r2, r1
 80020c0:	eb42 0303 	adc.w	r3, r2, r3
 80020c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80020d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80020e0:	4649      	mov	r1, r9
 80020e2:	008b      	lsls	r3, r1, #2
 80020e4:	4641      	mov	r1, r8
 80020e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020ea:	4641      	mov	r1, r8
 80020ec:	008a      	lsls	r2, r1, #2
 80020ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80020f2:	f7fe f869 	bl	80001c8 <__aeabi_uldivmod>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4611      	mov	r1, r2
 80020fc:	4b38      	ldr	r3, [pc, #224]	; (80021e0 <UART_SetConfig+0x4e4>)
 80020fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2264      	movs	r2, #100	; 0x64
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	1acb      	subs	r3, r1, r3
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	3332      	adds	r3, #50	; 0x32
 8002110:	4a33      	ldr	r2, [pc, #204]	; (80021e0 <UART_SetConfig+0x4e4>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800211c:	441c      	add	r4, r3
 800211e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002122:	2200      	movs	r2, #0
 8002124:	673b      	str	r3, [r7, #112]	; 0x70
 8002126:	677a      	str	r2, [r7, #116]	; 0x74
 8002128:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800212c:	4642      	mov	r2, r8
 800212e:	464b      	mov	r3, r9
 8002130:	1891      	adds	r1, r2, r2
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	415b      	adcs	r3, r3
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800213c:	4641      	mov	r1, r8
 800213e:	1851      	adds	r1, r2, r1
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	4649      	mov	r1, r9
 8002144:	414b      	adcs	r3, r1
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002154:	4659      	mov	r1, fp
 8002156:	00cb      	lsls	r3, r1, #3
 8002158:	4651      	mov	r1, sl
 800215a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800215e:	4651      	mov	r1, sl
 8002160:	00ca      	lsls	r2, r1, #3
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	4603      	mov	r3, r0
 8002168:	4642      	mov	r2, r8
 800216a:	189b      	adds	r3, r3, r2
 800216c:	66bb      	str	r3, [r7, #104]	; 0x68
 800216e:	464b      	mov	r3, r9
 8002170:	460a      	mov	r2, r1
 8002172:	eb42 0303 	adc.w	r3, r2, r3
 8002176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	663b      	str	r3, [r7, #96]	; 0x60
 8002182:	667a      	str	r2, [r7, #100]	; 0x64
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002190:	4649      	mov	r1, r9
 8002192:	008b      	lsls	r3, r1, #2
 8002194:	4641      	mov	r1, r8
 8002196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800219a:	4641      	mov	r1, r8
 800219c:	008a      	lsls	r2, r1, #2
 800219e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021a2:	f7fe f811 	bl	80001c8 <__aeabi_uldivmod>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <UART_SetConfig+0x4e4>)
 80021ac:	fba3 1302 	umull	r1, r3, r3, r2
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	2164      	movs	r1, #100	; 0x64
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	3332      	adds	r3, #50	; 0x32
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <UART_SetConfig+0x4e4>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	f003 020f 	and.w	r2, r3, #15
 80021ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4422      	add	r2, r4
 80021d2:	609a      	str	r2, [r3, #8]
}
 80021d4:	bf00      	nop
 80021d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80021da:	46bd      	mov	sp, r7
 80021dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021e0:	51eb851f 	.word	0x51eb851f

080021e4 <std>:
 80021e4:	2300      	movs	r3, #0
 80021e6:	b510      	push	{r4, lr}
 80021e8:	4604      	mov	r4, r0
 80021ea:	e9c0 3300 	strd	r3, r3, [r0]
 80021ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021f2:	6083      	str	r3, [r0, #8]
 80021f4:	8181      	strh	r1, [r0, #12]
 80021f6:	6643      	str	r3, [r0, #100]	; 0x64
 80021f8:	81c2      	strh	r2, [r0, #14]
 80021fa:	6183      	str	r3, [r0, #24]
 80021fc:	4619      	mov	r1, r3
 80021fe:	2208      	movs	r2, #8
 8002200:	305c      	adds	r0, #92	; 0x5c
 8002202:	f000 fa93 	bl	800272c <memset>
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <std+0x58>)
 8002208:	6263      	str	r3, [r4, #36]	; 0x24
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <std+0x5c>)
 800220c:	62a3      	str	r3, [r4, #40]	; 0x28
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <std+0x60>)
 8002210:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <std+0x64>)
 8002214:	6323      	str	r3, [r4, #48]	; 0x30
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <std+0x68>)
 8002218:	6224      	str	r4, [r4, #32]
 800221a:	429c      	cmp	r4, r3
 800221c:	d006      	beq.n	800222c <std+0x48>
 800221e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002222:	4294      	cmp	r4, r2
 8002224:	d002      	beq.n	800222c <std+0x48>
 8002226:	33d0      	adds	r3, #208	; 0xd0
 8002228:	429c      	cmp	r4, r3
 800222a:	d105      	bne.n	8002238 <std+0x54>
 800222c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002234:	f000 baf2 	b.w	800281c <__retarget_lock_init_recursive>
 8002238:	bd10      	pop	{r4, pc}
 800223a:	bf00      	nop
 800223c:	0800257d 	.word	0x0800257d
 8002240:	0800259f 	.word	0x0800259f
 8002244:	080025d7 	.word	0x080025d7
 8002248:	080025fb 	.word	0x080025fb
 800224c:	200000d0 	.word	0x200000d0

08002250 <stdio_exit_handler>:
 8002250:	4a02      	ldr	r2, [pc, #8]	; (800225c <stdio_exit_handler+0xc>)
 8002252:	4903      	ldr	r1, [pc, #12]	; (8002260 <stdio_exit_handler+0x10>)
 8002254:	4803      	ldr	r0, [pc, #12]	; (8002264 <stdio_exit_handler+0x14>)
 8002256:	f000 b869 	b.w	800232c <_fwalk_sglue>
 800225a:	bf00      	nop
 800225c:	2000000c 	.word	0x2000000c
 8002260:	08002b31 	.word	0x08002b31
 8002264:	20000018 	.word	0x20000018

08002268 <cleanup_stdio>:
 8002268:	6841      	ldr	r1, [r0, #4]
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <cleanup_stdio+0x34>)
 800226c:	4299      	cmp	r1, r3
 800226e:	b510      	push	{r4, lr}
 8002270:	4604      	mov	r4, r0
 8002272:	d001      	beq.n	8002278 <cleanup_stdio+0x10>
 8002274:	f000 fc5c 	bl	8002b30 <_fflush_r>
 8002278:	68a1      	ldr	r1, [r4, #8]
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <cleanup_stdio+0x38>)
 800227c:	4299      	cmp	r1, r3
 800227e:	d002      	beq.n	8002286 <cleanup_stdio+0x1e>
 8002280:	4620      	mov	r0, r4
 8002282:	f000 fc55 	bl	8002b30 <_fflush_r>
 8002286:	68e1      	ldr	r1, [r4, #12]
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <cleanup_stdio+0x3c>)
 800228a:	4299      	cmp	r1, r3
 800228c:	d004      	beq.n	8002298 <cleanup_stdio+0x30>
 800228e:	4620      	mov	r0, r4
 8002290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002294:	f000 bc4c 	b.w	8002b30 <_fflush_r>
 8002298:	bd10      	pop	{r4, pc}
 800229a:	bf00      	nop
 800229c:	200000d0 	.word	0x200000d0
 80022a0:	20000138 	.word	0x20000138
 80022a4:	200001a0 	.word	0x200001a0

080022a8 <global_stdio_init.part.0>:
 80022a8:	b510      	push	{r4, lr}
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <global_stdio_init.part.0+0x30>)
 80022ac:	4c0b      	ldr	r4, [pc, #44]	; (80022dc <global_stdio_init.part.0+0x34>)
 80022ae:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <global_stdio_init.part.0+0x38>)
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	4620      	mov	r0, r4
 80022b4:	2200      	movs	r2, #0
 80022b6:	2104      	movs	r1, #4
 80022b8:	f7ff ff94 	bl	80021e4 <std>
 80022bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80022c0:	2201      	movs	r2, #1
 80022c2:	2109      	movs	r1, #9
 80022c4:	f7ff ff8e 	bl	80021e4 <std>
 80022c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80022cc:	2202      	movs	r2, #2
 80022ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022d2:	2112      	movs	r1, #18
 80022d4:	f7ff bf86 	b.w	80021e4 <std>
 80022d8:	20000208 	.word	0x20000208
 80022dc:	200000d0 	.word	0x200000d0
 80022e0:	08002251 	.word	0x08002251

080022e4 <__sfp_lock_acquire>:
 80022e4:	4801      	ldr	r0, [pc, #4]	; (80022ec <__sfp_lock_acquire+0x8>)
 80022e6:	f000 ba9a 	b.w	800281e <__retarget_lock_acquire_recursive>
 80022ea:	bf00      	nop
 80022ec:	20000211 	.word	0x20000211

080022f0 <__sfp_lock_release>:
 80022f0:	4801      	ldr	r0, [pc, #4]	; (80022f8 <__sfp_lock_release+0x8>)
 80022f2:	f000 ba95 	b.w	8002820 <__retarget_lock_release_recursive>
 80022f6:	bf00      	nop
 80022f8:	20000211 	.word	0x20000211

080022fc <__sinit>:
 80022fc:	b510      	push	{r4, lr}
 80022fe:	4604      	mov	r4, r0
 8002300:	f7ff fff0 	bl	80022e4 <__sfp_lock_acquire>
 8002304:	6a23      	ldr	r3, [r4, #32]
 8002306:	b11b      	cbz	r3, 8002310 <__sinit+0x14>
 8002308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800230c:	f7ff bff0 	b.w	80022f0 <__sfp_lock_release>
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <__sinit+0x28>)
 8002312:	6223      	str	r3, [r4, #32]
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <__sinit+0x2c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f5      	bne.n	8002308 <__sinit+0xc>
 800231c:	f7ff ffc4 	bl	80022a8 <global_stdio_init.part.0>
 8002320:	e7f2      	b.n	8002308 <__sinit+0xc>
 8002322:	bf00      	nop
 8002324:	08002269 	.word	0x08002269
 8002328:	20000208 	.word	0x20000208

0800232c <_fwalk_sglue>:
 800232c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002330:	4607      	mov	r7, r0
 8002332:	4688      	mov	r8, r1
 8002334:	4614      	mov	r4, r2
 8002336:	2600      	movs	r6, #0
 8002338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800233c:	f1b9 0901 	subs.w	r9, r9, #1
 8002340:	d505      	bpl.n	800234e <_fwalk_sglue+0x22>
 8002342:	6824      	ldr	r4, [r4, #0]
 8002344:	2c00      	cmp	r4, #0
 8002346:	d1f7      	bne.n	8002338 <_fwalk_sglue+0xc>
 8002348:	4630      	mov	r0, r6
 800234a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800234e:	89ab      	ldrh	r3, [r5, #12]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d907      	bls.n	8002364 <_fwalk_sglue+0x38>
 8002354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002358:	3301      	adds	r3, #1
 800235a:	d003      	beq.n	8002364 <_fwalk_sglue+0x38>
 800235c:	4629      	mov	r1, r5
 800235e:	4638      	mov	r0, r7
 8002360:	47c0      	blx	r8
 8002362:	4306      	orrs	r6, r0
 8002364:	3568      	adds	r5, #104	; 0x68
 8002366:	e7e9      	b.n	800233c <_fwalk_sglue+0x10>

08002368 <_puts_r>:
 8002368:	6a03      	ldr	r3, [r0, #32]
 800236a:	b570      	push	{r4, r5, r6, lr}
 800236c:	6884      	ldr	r4, [r0, #8]
 800236e:	4605      	mov	r5, r0
 8002370:	460e      	mov	r6, r1
 8002372:	b90b      	cbnz	r3, 8002378 <_puts_r+0x10>
 8002374:	f7ff ffc2 	bl	80022fc <__sinit>
 8002378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800237a:	07db      	lsls	r3, r3, #31
 800237c:	d405      	bmi.n	800238a <_puts_r+0x22>
 800237e:	89a3      	ldrh	r3, [r4, #12]
 8002380:	0598      	lsls	r0, r3, #22
 8002382:	d402      	bmi.n	800238a <_puts_r+0x22>
 8002384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002386:	f000 fa4a 	bl	800281e <__retarget_lock_acquire_recursive>
 800238a:	89a3      	ldrh	r3, [r4, #12]
 800238c:	0719      	lsls	r1, r3, #28
 800238e:	d513      	bpl.n	80023b8 <_puts_r+0x50>
 8002390:	6923      	ldr	r3, [r4, #16]
 8002392:	b18b      	cbz	r3, 80023b8 <_puts_r+0x50>
 8002394:	3e01      	subs	r6, #1
 8002396:	68a3      	ldr	r3, [r4, #8]
 8002398:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800239c:	3b01      	subs	r3, #1
 800239e:	60a3      	str	r3, [r4, #8]
 80023a0:	b9e9      	cbnz	r1, 80023de <_puts_r+0x76>
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	da2e      	bge.n	8002404 <_puts_r+0x9c>
 80023a6:	4622      	mov	r2, r4
 80023a8:	210a      	movs	r1, #10
 80023aa:	4628      	mov	r0, r5
 80023ac:	f000 f929 	bl	8002602 <__swbuf_r>
 80023b0:	3001      	adds	r0, #1
 80023b2:	d007      	beq.n	80023c4 <_puts_r+0x5c>
 80023b4:	250a      	movs	r5, #10
 80023b6:	e007      	b.n	80023c8 <_puts_r+0x60>
 80023b8:	4621      	mov	r1, r4
 80023ba:	4628      	mov	r0, r5
 80023bc:	f000 f95e 	bl	800267c <__swsetup_r>
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d0e7      	beq.n	8002394 <_puts_r+0x2c>
 80023c4:	f04f 35ff 	mov.w	r5, #4294967295
 80023c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023ca:	07da      	lsls	r2, r3, #31
 80023cc:	d405      	bmi.n	80023da <_puts_r+0x72>
 80023ce:	89a3      	ldrh	r3, [r4, #12]
 80023d0:	059b      	lsls	r3, r3, #22
 80023d2:	d402      	bmi.n	80023da <_puts_r+0x72>
 80023d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023d6:	f000 fa23 	bl	8002820 <__retarget_lock_release_recursive>
 80023da:	4628      	mov	r0, r5
 80023dc:	bd70      	pop	{r4, r5, r6, pc}
 80023de:	2b00      	cmp	r3, #0
 80023e0:	da04      	bge.n	80023ec <_puts_r+0x84>
 80023e2:	69a2      	ldr	r2, [r4, #24]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dc06      	bgt.n	80023f6 <_puts_r+0x8e>
 80023e8:	290a      	cmp	r1, #10
 80023ea:	d004      	beq.n	80023f6 <_puts_r+0x8e>
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	6022      	str	r2, [r4, #0]
 80023f2:	7019      	strb	r1, [r3, #0]
 80023f4:	e7cf      	b.n	8002396 <_puts_r+0x2e>
 80023f6:	4622      	mov	r2, r4
 80023f8:	4628      	mov	r0, r5
 80023fa:	f000 f902 	bl	8002602 <__swbuf_r>
 80023fe:	3001      	adds	r0, #1
 8002400:	d1c9      	bne.n	8002396 <_puts_r+0x2e>
 8002402:	e7df      	b.n	80023c4 <_puts_r+0x5c>
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	250a      	movs	r5, #10
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	6022      	str	r2, [r4, #0]
 800240c:	701d      	strb	r5, [r3, #0]
 800240e:	e7db      	b.n	80023c8 <_puts_r+0x60>

08002410 <puts>:
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <puts+0xc>)
 8002412:	4601      	mov	r1, r0
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	f7ff bfa7 	b.w	8002368 <_puts_r>
 800241a:	bf00      	nop
 800241c:	20000064 	.word	0x20000064

08002420 <setvbuf>:
 8002420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002424:	461d      	mov	r5, r3
 8002426:	4b54      	ldr	r3, [pc, #336]	; (8002578 <setvbuf+0x158>)
 8002428:	681f      	ldr	r7, [r3, #0]
 800242a:	4604      	mov	r4, r0
 800242c:	460e      	mov	r6, r1
 800242e:	4690      	mov	r8, r2
 8002430:	b127      	cbz	r7, 800243c <setvbuf+0x1c>
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	b913      	cbnz	r3, 800243c <setvbuf+0x1c>
 8002436:	4638      	mov	r0, r7
 8002438:	f7ff ff60 	bl	80022fc <__sinit>
 800243c:	f1b8 0f02 	cmp.w	r8, #2
 8002440:	d006      	beq.n	8002450 <setvbuf+0x30>
 8002442:	f1b8 0f01 	cmp.w	r8, #1
 8002446:	f200 8094 	bhi.w	8002572 <setvbuf+0x152>
 800244a:	2d00      	cmp	r5, #0
 800244c:	f2c0 8091 	blt.w	8002572 <setvbuf+0x152>
 8002450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002452:	07da      	lsls	r2, r3, #31
 8002454:	d405      	bmi.n	8002462 <setvbuf+0x42>
 8002456:	89a3      	ldrh	r3, [r4, #12]
 8002458:	059b      	lsls	r3, r3, #22
 800245a:	d402      	bmi.n	8002462 <setvbuf+0x42>
 800245c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800245e:	f000 f9de 	bl	800281e <__retarget_lock_acquire_recursive>
 8002462:	4621      	mov	r1, r4
 8002464:	4638      	mov	r0, r7
 8002466:	f000 fb63 	bl	8002b30 <_fflush_r>
 800246a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800246c:	b141      	cbz	r1, 8002480 <setvbuf+0x60>
 800246e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002472:	4299      	cmp	r1, r3
 8002474:	d002      	beq.n	800247c <setvbuf+0x5c>
 8002476:	4638      	mov	r0, r7
 8002478:	f000 f9d4 	bl	8002824 <_free_r>
 800247c:	2300      	movs	r3, #0
 800247e:	6363      	str	r3, [r4, #52]	; 0x34
 8002480:	2300      	movs	r3, #0
 8002482:	61a3      	str	r3, [r4, #24]
 8002484:	6063      	str	r3, [r4, #4]
 8002486:	89a3      	ldrh	r3, [r4, #12]
 8002488:	0618      	lsls	r0, r3, #24
 800248a:	d503      	bpl.n	8002494 <setvbuf+0x74>
 800248c:	6921      	ldr	r1, [r4, #16]
 800248e:	4638      	mov	r0, r7
 8002490:	f000 f9c8 	bl	8002824 <_free_r>
 8002494:	89a3      	ldrh	r3, [r4, #12]
 8002496:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	f1b8 0f02 	cmp.w	r8, #2
 80024a2:	81a3      	strh	r3, [r4, #12]
 80024a4:	d05f      	beq.n	8002566 <setvbuf+0x146>
 80024a6:	ab01      	add	r3, sp, #4
 80024a8:	466a      	mov	r2, sp
 80024aa:	4621      	mov	r1, r4
 80024ac:	4638      	mov	r0, r7
 80024ae:	f000 fb67 	bl	8002b80 <__swhatbuf_r>
 80024b2:	89a3      	ldrh	r3, [r4, #12]
 80024b4:	4318      	orrs	r0, r3
 80024b6:	81a0      	strh	r0, [r4, #12]
 80024b8:	bb2d      	cbnz	r5, 8002506 <setvbuf+0xe6>
 80024ba:	9d00      	ldr	r5, [sp, #0]
 80024bc:	4628      	mov	r0, r5
 80024be:	f000 f9fd 	bl	80028bc <malloc>
 80024c2:	4606      	mov	r6, r0
 80024c4:	2800      	cmp	r0, #0
 80024c6:	d150      	bne.n	800256a <setvbuf+0x14a>
 80024c8:	f8dd 9000 	ldr.w	r9, [sp]
 80024cc:	45a9      	cmp	r9, r5
 80024ce:	d13e      	bne.n	800254e <setvbuf+0x12e>
 80024d0:	f04f 35ff 	mov.w	r5, #4294967295
 80024d4:	2200      	movs	r2, #0
 80024d6:	60a2      	str	r2, [r4, #8]
 80024d8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80024dc:	6022      	str	r2, [r4, #0]
 80024de:	6122      	str	r2, [r4, #16]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024e6:	6162      	str	r2, [r4, #20]
 80024e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80024ea:	f043 0302 	orr.w	r3, r3, #2
 80024ee:	07d1      	lsls	r1, r2, #31
 80024f0:	81a3      	strh	r3, [r4, #12]
 80024f2:	d404      	bmi.n	80024fe <setvbuf+0xde>
 80024f4:	059b      	lsls	r3, r3, #22
 80024f6:	d402      	bmi.n	80024fe <setvbuf+0xde>
 80024f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024fa:	f000 f991 	bl	8002820 <__retarget_lock_release_recursive>
 80024fe:	4628      	mov	r0, r5
 8002500:	b003      	add	sp, #12
 8002502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002506:	2e00      	cmp	r6, #0
 8002508:	d0d8      	beq.n	80024bc <setvbuf+0x9c>
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	b913      	cbnz	r3, 8002514 <setvbuf+0xf4>
 800250e:	4638      	mov	r0, r7
 8002510:	f7ff fef4 	bl	80022fc <__sinit>
 8002514:	f1b8 0f01 	cmp.w	r8, #1
 8002518:	bf08      	it	eq
 800251a:	89a3      	ldrheq	r3, [r4, #12]
 800251c:	6026      	str	r6, [r4, #0]
 800251e:	bf04      	itt	eq
 8002520:	f043 0301 	orreq.w	r3, r3, #1
 8002524:	81a3      	strheq	r3, [r4, #12]
 8002526:	89a3      	ldrh	r3, [r4, #12]
 8002528:	f013 0208 	ands.w	r2, r3, #8
 800252c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002530:	d01d      	beq.n	800256e <setvbuf+0x14e>
 8002532:	07da      	lsls	r2, r3, #31
 8002534:	bf41      	itttt	mi
 8002536:	2200      	movmi	r2, #0
 8002538:	426d      	negmi	r5, r5
 800253a:	60a2      	strmi	r2, [r4, #8]
 800253c:	61a5      	strmi	r5, [r4, #24]
 800253e:	bf58      	it	pl
 8002540:	60a5      	strpl	r5, [r4, #8]
 8002542:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002544:	f015 0501 	ands.w	r5, r5, #1
 8002548:	d0d4      	beq.n	80024f4 <setvbuf+0xd4>
 800254a:	2500      	movs	r5, #0
 800254c:	e7d7      	b.n	80024fe <setvbuf+0xde>
 800254e:	4648      	mov	r0, r9
 8002550:	f000 f9b4 	bl	80028bc <malloc>
 8002554:	4606      	mov	r6, r0
 8002556:	2800      	cmp	r0, #0
 8002558:	d0ba      	beq.n	80024d0 <setvbuf+0xb0>
 800255a:	89a3      	ldrh	r3, [r4, #12]
 800255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002560:	81a3      	strh	r3, [r4, #12]
 8002562:	464d      	mov	r5, r9
 8002564:	e7d1      	b.n	800250a <setvbuf+0xea>
 8002566:	2500      	movs	r5, #0
 8002568:	e7b4      	b.n	80024d4 <setvbuf+0xb4>
 800256a:	46a9      	mov	r9, r5
 800256c:	e7f5      	b.n	800255a <setvbuf+0x13a>
 800256e:	60a2      	str	r2, [r4, #8]
 8002570:	e7e7      	b.n	8002542 <setvbuf+0x122>
 8002572:	f04f 35ff 	mov.w	r5, #4294967295
 8002576:	e7c2      	b.n	80024fe <setvbuf+0xde>
 8002578:	20000064 	.word	0x20000064

0800257c <__sread>:
 800257c:	b510      	push	{r4, lr}
 800257e:	460c      	mov	r4, r1
 8002580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002584:	f000 f8fc 	bl	8002780 <_read_r>
 8002588:	2800      	cmp	r0, #0
 800258a:	bfab      	itete	ge
 800258c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800258e:	89a3      	ldrhlt	r3, [r4, #12]
 8002590:	181b      	addge	r3, r3, r0
 8002592:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002596:	bfac      	ite	ge
 8002598:	6563      	strge	r3, [r4, #84]	; 0x54
 800259a:	81a3      	strhlt	r3, [r4, #12]
 800259c:	bd10      	pop	{r4, pc}

0800259e <__swrite>:
 800259e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025a2:	461f      	mov	r7, r3
 80025a4:	898b      	ldrh	r3, [r1, #12]
 80025a6:	05db      	lsls	r3, r3, #23
 80025a8:	4605      	mov	r5, r0
 80025aa:	460c      	mov	r4, r1
 80025ac:	4616      	mov	r6, r2
 80025ae:	d505      	bpl.n	80025bc <__swrite+0x1e>
 80025b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025b4:	2302      	movs	r3, #2
 80025b6:	2200      	movs	r2, #0
 80025b8:	f000 f8d0 	bl	800275c <_lseek_r>
 80025bc:	89a3      	ldrh	r3, [r4, #12]
 80025be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025c6:	81a3      	strh	r3, [r4, #12]
 80025c8:	4632      	mov	r2, r6
 80025ca:	463b      	mov	r3, r7
 80025cc:	4628      	mov	r0, r5
 80025ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025d2:	f000 b8e7 	b.w	80027a4 <_write_r>

080025d6 <__sseek>:
 80025d6:	b510      	push	{r4, lr}
 80025d8:	460c      	mov	r4, r1
 80025da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025de:	f000 f8bd 	bl	800275c <_lseek_r>
 80025e2:	1c43      	adds	r3, r0, #1
 80025e4:	89a3      	ldrh	r3, [r4, #12]
 80025e6:	bf15      	itete	ne
 80025e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80025ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80025ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80025f2:	81a3      	strheq	r3, [r4, #12]
 80025f4:	bf18      	it	ne
 80025f6:	81a3      	strhne	r3, [r4, #12]
 80025f8:	bd10      	pop	{r4, pc}

080025fa <__sclose>:
 80025fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025fe:	f000 b89d 	b.w	800273c <_close_r>

08002602 <__swbuf_r>:
 8002602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002604:	460e      	mov	r6, r1
 8002606:	4614      	mov	r4, r2
 8002608:	4605      	mov	r5, r0
 800260a:	b118      	cbz	r0, 8002614 <__swbuf_r+0x12>
 800260c:	6a03      	ldr	r3, [r0, #32]
 800260e:	b90b      	cbnz	r3, 8002614 <__swbuf_r+0x12>
 8002610:	f7ff fe74 	bl	80022fc <__sinit>
 8002614:	69a3      	ldr	r3, [r4, #24]
 8002616:	60a3      	str	r3, [r4, #8]
 8002618:	89a3      	ldrh	r3, [r4, #12]
 800261a:	071a      	lsls	r2, r3, #28
 800261c:	d525      	bpl.n	800266a <__swbuf_r+0x68>
 800261e:	6923      	ldr	r3, [r4, #16]
 8002620:	b31b      	cbz	r3, 800266a <__swbuf_r+0x68>
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	6922      	ldr	r2, [r4, #16]
 8002626:	1a98      	subs	r0, r3, r2
 8002628:	6963      	ldr	r3, [r4, #20]
 800262a:	b2f6      	uxtb	r6, r6
 800262c:	4283      	cmp	r3, r0
 800262e:	4637      	mov	r7, r6
 8002630:	dc04      	bgt.n	800263c <__swbuf_r+0x3a>
 8002632:	4621      	mov	r1, r4
 8002634:	4628      	mov	r0, r5
 8002636:	f000 fa7b 	bl	8002b30 <_fflush_r>
 800263a:	b9e0      	cbnz	r0, 8002676 <__swbuf_r+0x74>
 800263c:	68a3      	ldr	r3, [r4, #8]
 800263e:	3b01      	subs	r3, #1
 8002640:	60a3      	str	r3, [r4, #8]
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	6022      	str	r2, [r4, #0]
 8002648:	701e      	strb	r6, [r3, #0]
 800264a:	6962      	ldr	r2, [r4, #20]
 800264c:	1c43      	adds	r3, r0, #1
 800264e:	429a      	cmp	r2, r3
 8002650:	d004      	beq.n	800265c <__swbuf_r+0x5a>
 8002652:	89a3      	ldrh	r3, [r4, #12]
 8002654:	07db      	lsls	r3, r3, #31
 8002656:	d506      	bpl.n	8002666 <__swbuf_r+0x64>
 8002658:	2e0a      	cmp	r6, #10
 800265a:	d104      	bne.n	8002666 <__swbuf_r+0x64>
 800265c:	4621      	mov	r1, r4
 800265e:	4628      	mov	r0, r5
 8002660:	f000 fa66 	bl	8002b30 <_fflush_r>
 8002664:	b938      	cbnz	r0, 8002676 <__swbuf_r+0x74>
 8002666:	4638      	mov	r0, r7
 8002668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800266a:	4621      	mov	r1, r4
 800266c:	4628      	mov	r0, r5
 800266e:	f000 f805 	bl	800267c <__swsetup_r>
 8002672:	2800      	cmp	r0, #0
 8002674:	d0d5      	beq.n	8002622 <__swbuf_r+0x20>
 8002676:	f04f 37ff 	mov.w	r7, #4294967295
 800267a:	e7f4      	b.n	8002666 <__swbuf_r+0x64>

0800267c <__swsetup_r>:
 800267c:	b538      	push	{r3, r4, r5, lr}
 800267e:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <__swsetup_r+0xac>)
 8002680:	4605      	mov	r5, r0
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	460c      	mov	r4, r1
 8002686:	b118      	cbz	r0, 8002690 <__swsetup_r+0x14>
 8002688:	6a03      	ldr	r3, [r0, #32]
 800268a:	b90b      	cbnz	r3, 8002690 <__swsetup_r+0x14>
 800268c:	f7ff fe36 	bl	80022fc <__sinit>
 8002690:	89a3      	ldrh	r3, [r4, #12]
 8002692:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002696:	0718      	lsls	r0, r3, #28
 8002698:	d422      	bmi.n	80026e0 <__swsetup_r+0x64>
 800269a:	06d9      	lsls	r1, r3, #27
 800269c:	d407      	bmi.n	80026ae <__swsetup_r+0x32>
 800269e:	2309      	movs	r3, #9
 80026a0:	602b      	str	r3, [r5, #0]
 80026a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80026a6:	81a3      	strh	r3, [r4, #12]
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	e034      	b.n	8002718 <__swsetup_r+0x9c>
 80026ae:	0758      	lsls	r0, r3, #29
 80026b0:	d512      	bpl.n	80026d8 <__swsetup_r+0x5c>
 80026b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026b4:	b141      	cbz	r1, 80026c8 <__swsetup_r+0x4c>
 80026b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026ba:	4299      	cmp	r1, r3
 80026bc:	d002      	beq.n	80026c4 <__swsetup_r+0x48>
 80026be:	4628      	mov	r0, r5
 80026c0:	f000 f8b0 	bl	8002824 <_free_r>
 80026c4:	2300      	movs	r3, #0
 80026c6:	6363      	str	r3, [r4, #52]	; 0x34
 80026c8:	89a3      	ldrh	r3, [r4, #12]
 80026ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80026ce:	81a3      	strh	r3, [r4, #12]
 80026d0:	2300      	movs	r3, #0
 80026d2:	6063      	str	r3, [r4, #4]
 80026d4:	6923      	ldr	r3, [r4, #16]
 80026d6:	6023      	str	r3, [r4, #0]
 80026d8:	89a3      	ldrh	r3, [r4, #12]
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	81a3      	strh	r3, [r4, #12]
 80026e0:	6923      	ldr	r3, [r4, #16]
 80026e2:	b94b      	cbnz	r3, 80026f8 <__swsetup_r+0x7c>
 80026e4:	89a3      	ldrh	r3, [r4, #12]
 80026e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80026ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ee:	d003      	beq.n	80026f8 <__swsetup_r+0x7c>
 80026f0:	4621      	mov	r1, r4
 80026f2:	4628      	mov	r0, r5
 80026f4:	f000 fa6a 	bl	8002bcc <__smakebuf_r>
 80026f8:	89a0      	ldrh	r0, [r4, #12]
 80026fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026fe:	f010 0301 	ands.w	r3, r0, #1
 8002702:	d00a      	beq.n	800271a <__swsetup_r+0x9e>
 8002704:	2300      	movs	r3, #0
 8002706:	60a3      	str	r3, [r4, #8]
 8002708:	6963      	ldr	r3, [r4, #20]
 800270a:	425b      	negs	r3, r3
 800270c:	61a3      	str	r3, [r4, #24]
 800270e:	6923      	ldr	r3, [r4, #16]
 8002710:	b943      	cbnz	r3, 8002724 <__swsetup_r+0xa8>
 8002712:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002716:	d1c4      	bne.n	80026a2 <__swsetup_r+0x26>
 8002718:	bd38      	pop	{r3, r4, r5, pc}
 800271a:	0781      	lsls	r1, r0, #30
 800271c:	bf58      	it	pl
 800271e:	6963      	ldrpl	r3, [r4, #20]
 8002720:	60a3      	str	r3, [r4, #8]
 8002722:	e7f4      	b.n	800270e <__swsetup_r+0x92>
 8002724:	2000      	movs	r0, #0
 8002726:	e7f7      	b.n	8002718 <__swsetup_r+0x9c>
 8002728:	20000064 	.word	0x20000064

0800272c <memset>:
 800272c:	4402      	add	r2, r0
 800272e:	4603      	mov	r3, r0
 8002730:	4293      	cmp	r3, r2
 8002732:	d100      	bne.n	8002736 <memset+0xa>
 8002734:	4770      	bx	lr
 8002736:	f803 1b01 	strb.w	r1, [r3], #1
 800273a:	e7f9      	b.n	8002730 <memset+0x4>

0800273c <_close_r>:
 800273c:	b538      	push	{r3, r4, r5, lr}
 800273e:	4d06      	ldr	r5, [pc, #24]	; (8002758 <_close_r+0x1c>)
 8002740:	2300      	movs	r3, #0
 8002742:	4604      	mov	r4, r0
 8002744:	4608      	mov	r0, r1
 8002746:	602b      	str	r3, [r5, #0]
 8002748:	f7fe f819 	bl	800077e <_close>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d102      	bne.n	8002756 <_close_r+0x1a>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	b103      	cbz	r3, 8002756 <_close_r+0x1a>
 8002754:	6023      	str	r3, [r4, #0]
 8002756:	bd38      	pop	{r3, r4, r5, pc}
 8002758:	2000020c 	.word	0x2000020c

0800275c <_lseek_r>:
 800275c:	b538      	push	{r3, r4, r5, lr}
 800275e:	4d07      	ldr	r5, [pc, #28]	; (800277c <_lseek_r+0x20>)
 8002760:	4604      	mov	r4, r0
 8002762:	4608      	mov	r0, r1
 8002764:	4611      	mov	r1, r2
 8002766:	2200      	movs	r2, #0
 8002768:	602a      	str	r2, [r5, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	f7fe f82e 	bl	80007cc <_lseek>
 8002770:	1c43      	adds	r3, r0, #1
 8002772:	d102      	bne.n	800277a <_lseek_r+0x1e>
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	b103      	cbz	r3, 800277a <_lseek_r+0x1e>
 8002778:	6023      	str	r3, [r4, #0]
 800277a:	bd38      	pop	{r3, r4, r5, pc}
 800277c:	2000020c 	.word	0x2000020c

08002780 <_read_r>:
 8002780:	b538      	push	{r3, r4, r5, lr}
 8002782:	4d07      	ldr	r5, [pc, #28]	; (80027a0 <_read_r+0x20>)
 8002784:	4604      	mov	r4, r0
 8002786:	4608      	mov	r0, r1
 8002788:	4611      	mov	r1, r2
 800278a:	2200      	movs	r2, #0
 800278c:	602a      	str	r2, [r5, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	f7fd ffbc 	bl	800070c <_read>
 8002794:	1c43      	adds	r3, r0, #1
 8002796:	d102      	bne.n	800279e <_read_r+0x1e>
 8002798:	682b      	ldr	r3, [r5, #0]
 800279a:	b103      	cbz	r3, 800279e <_read_r+0x1e>
 800279c:	6023      	str	r3, [r4, #0]
 800279e:	bd38      	pop	{r3, r4, r5, pc}
 80027a0:	2000020c 	.word	0x2000020c

080027a4 <_write_r>:
 80027a4:	b538      	push	{r3, r4, r5, lr}
 80027a6:	4d07      	ldr	r5, [pc, #28]	; (80027c4 <_write_r+0x20>)
 80027a8:	4604      	mov	r4, r0
 80027aa:	4608      	mov	r0, r1
 80027ac:	4611      	mov	r1, r2
 80027ae:	2200      	movs	r2, #0
 80027b0:	602a      	str	r2, [r5, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f7fd ffc7 	bl	8000746 <_write>
 80027b8:	1c43      	adds	r3, r0, #1
 80027ba:	d102      	bne.n	80027c2 <_write_r+0x1e>
 80027bc:	682b      	ldr	r3, [r5, #0]
 80027be:	b103      	cbz	r3, 80027c2 <_write_r+0x1e>
 80027c0:	6023      	str	r3, [r4, #0]
 80027c2:	bd38      	pop	{r3, r4, r5, pc}
 80027c4:	2000020c 	.word	0x2000020c

080027c8 <__errno>:
 80027c8:	4b01      	ldr	r3, [pc, #4]	; (80027d0 <__errno+0x8>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000064 	.word	0x20000064

080027d4 <__libc_init_array>:
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	4d0d      	ldr	r5, [pc, #52]	; (800280c <__libc_init_array+0x38>)
 80027d8:	4c0d      	ldr	r4, [pc, #52]	; (8002810 <__libc_init_array+0x3c>)
 80027da:	1b64      	subs	r4, r4, r5
 80027dc:	10a4      	asrs	r4, r4, #2
 80027de:	2600      	movs	r6, #0
 80027e0:	42a6      	cmp	r6, r4
 80027e2:	d109      	bne.n	80027f8 <__libc_init_array+0x24>
 80027e4:	4d0b      	ldr	r5, [pc, #44]	; (8002814 <__libc_init_array+0x40>)
 80027e6:	4c0c      	ldr	r4, [pc, #48]	; (8002818 <__libc_init_array+0x44>)
 80027e8:	f000 fa5e 	bl	8002ca8 <_init>
 80027ec:	1b64      	subs	r4, r4, r5
 80027ee:	10a4      	asrs	r4, r4, #2
 80027f0:	2600      	movs	r6, #0
 80027f2:	42a6      	cmp	r6, r4
 80027f4:	d105      	bne.n	8002802 <__libc_init_array+0x2e>
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
 80027f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027fc:	4798      	blx	r3
 80027fe:	3601      	adds	r6, #1
 8002800:	e7ee      	b.n	80027e0 <__libc_init_array+0xc>
 8002802:	f855 3b04 	ldr.w	r3, [r5], #4
 8002806:	4798      	blx	r3
 8002808:	3601      	adds	r6, #1
 800280a:	e7f2      	b.n	80027f2 <__libc_init_array+0x1e>
 800280c:	08002cf0 	.word	0x08002cf0
 8002810:	08002cf0 	.word	0x08002cf0
 8002814:	08002cf0 	.word	0x08002cf0
 8002818:	08002cf4 	.word	0x08002cf4

0800281c <__retarget_lock_init_recursive>:
 800281c:	4770      	bx	lr

0800281e <__retarget_lock_acquire_recursive>:
 800281e:	4770      	bx	lr

08002820 <__retarget_lock_release_recursive>:
 8002820:	4770      	bx	lr
	...

08002824 <_free_r>:
 8002824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002826:	2900      	cmp	r1, #0
 8002828:	d044      	beq.n	80028b4 <_free_r+0x90>
 800282a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800282e:	9001      	str	r0, [sp, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f1a1 0404 	sub.w	r4, r1, #4
 8002836:	bfb8      	it	lt
 8002838:	18e4      	addlt	r4, r4, r3
 800283a:	f000 f8e7 	bl	8002a0c <__malloc_lock>
 800283e:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <_free_r+0x94>)
 8002840:	9801      	ldr	r0, [sp, #4]
 8002842:	6813      	ldr	r3, [r2, #0]
 8002844:	b933      	cbnz	r3, 8002854 <_free_r+0x30>
 8002846:	6063      	str	r3, [r4, #4]
 8002848:	6014      	str	r4, [r2, #0]
 800284a:	b003      	add	sp, #12
 800284c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002850:	f000 b8e2 	b.w	8002a18 <__malloc_unlock>
 8002854:	42a3      	cmp	r3, r4
 8002856:	d908      	bls.n	800286a <_free_r+0x46>
 8002858:	6825      	ldr	r5, [r4, #0]
 800285a:	1961      	adds	r1, r4, r5
 800285c:	428b      	cmp	r3, r1
 800285e:	bf01      	itttt	eq
 8002860:	6819      	ldreq	r1, [r3, #0]
 8002862:	685b      	ldreq	r3, [r3, #4]
 8002864:	1949      	addeq	r1, r1, r5
 8002866:	6021      	streq	r1, [r4, #0]
 8002868:	e7ed      	b.n	8002846 <_free_r+0x22>
 800286a:	461a      	mov	r2, r3
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	b10b      	cbz	r3, 8002874 <_free_r+0x50>
 8002870:	42a3      	cmp	r3, r4
 8002872:	d9fa      	bls.n	800286a <_free_r+0x46>
 8002874:	6811      	ldr	r1, [r2, #0]
 8002876:	1855      	adds	r5, r2, r1
 8002878:	42a5      	cmp	r5, r4
 800287a:	d10b      	bne.n	8002894 <_free_r+0x70>
 800287c:	6824      	ldr	r4, [r4, #0]
 800287e:	4421      	add	r1, r4
 8002880:	1854      	adds	r4, r2, r1
 8002882:	42a3      	cmp	r3, r4
 8002884:	6011      	str	r1, [r2, #0]
 8002886:	d1e0      	bne.n	800284a <_free_r+0x26>
 8002888:	681c      	ldr	r4, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	6053      	str	r3, [r2, #4]
 800288e:	440c      	add	r4, r1
 8002890:	6014      	str	r4, [r2, #0]
 8002892:	e7da      	b.n	800284a <_free_r+0x26>
 8002894:	d902      	bls.n	800289c <_free_r+0x78>
 8002896:	230c      	movs	r3, #12
 8002898:	6003      	str	r3, [r0, #0]
 800289a:	e7d6      	b.n	800284a <_free_r+0x26>
 800289c:	6825      	ldr	r5, [r4, #0]
 800289e:	1961      	adds	r1, r4, r5
 80028a0:	428b      	cmp	r3, r1
 80028a2:	bf04      	itt	eq
 80028a4:	6819      	ldreq	r1, [r3, #0]
 80028a6:	685b      	ldreq	r3, [r3, #4]
 80028a8:	6063      	str	r3, [r4, #4]
 80028aa:	bf04      	itt	eq
 80028ac:	1949      	addeq	r1, r1, r5
 80028ae:	6021      	streq	r1, [r4, #0]
 80028b0:	6054      	str	r4, [r2, #4]
 80028b2:	e7ca      	b.n	800284a <_free_r+0x26>
 80028b4:	b003      	add	sp, #12
 80028b6:	bd30      	pop	{r4, r5, pc}
 80028b8:	20000214 	.word	0x20000214

080028bc <malloc>:
 80028bc:	4b02      	ldr	r3, [pc, #8]	; (80028c8 <malloc+0xc>)
 80028be:	4601      	mov	r1, r0
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	f000 b823 	b.w	800290c <_malloc_r>
 80028c6:	bf00      	nop
 80028c8:	20000064 	.word	0x20000064

080028cc <sbrk_aligned>:
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	4e0e      	ldr	r6, [pc, #56]	; (8002908 <sbrk_aligned+0x3c>)
 80028d0:	460c      	mov	r4, r1
 80028d2:	6831      	ldr	r1, [r6, #0]
 80028d4:	4605      	mov	r5, r0
 80028d6:	b911      	cbnz	r1, 80028de <sbrk_aligned+0x12>
 80028d8:	f000 f9d6 	bl	8002c88 <_sbrk_r>
 80028dc:	6030      	str	r0, [r6, #0]
 80028de:	4621      	mov	r1, r4
 80028e0:	4628      	mov	r0, r5
 80028e2:	f000 f9d1 	bl	8002c88 <_sbrk_r>
 80028e6:	1c43      	adds	r3, r0, #1
 80028e8:	d00a      	beq.n	8002900 <sbrk_aligned+0x34>
 80028ea:	1cc4      	adds	r4, r0, #3
 80028ec:	f024 0403 	bic.w	r4, r4, #3
 80028f0:	42a0      	cmp	r0, r4
 80028f2:	d007      	beq.n	8002904 <sbrk_aligned+0x38>
 80028f4:	1a21      	subs	r1, r4, r0
 80028f6:	4628      	mov	r0, r5
 80028f8:	f000 f9c6 	bl	8002c88 <_sbrk_r>
 80028fc:	3001      	adds	r0, #1
 80028fe:	d101      	bne.n	8002904 <sbrk_aligned+0x38>
 8002900:	f04f 34ff 	mov.w	r4, #4294967295
 8002904:	4620      	mov	r0, r4
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	20000218 	.word	0x20000218

0800290c <_malloc_r>:
 800290c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002910:	1ccd      	adds	r5, r1, #3
 8002912:	f025 0503 	bic.w	r5, r5, #3
 8002916:	3508      	adds	r5, #8
 8002918:	2d0c      	cmp	r5, #12
 800291a:	bf38      	it	cc
 800291c:	250c      	movcc	r5, #12
 800291e:	2d00      	cmp	r5, #0
 8002920:	4607      	mov	r7, r0
 8002922:	db01      	blt.n	8002928 <_malloc_r+0x1c>
 8002924:	42a9      	cmp	r1, r5
 8002926:	d905      	bls.n	8002934 <_malloc_r+0x28>
 8002928:	230c      	movs	r3, #12
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	2600      	movs	r6, #0
 800292e:	4630      	mov	r0, r6
 8002930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002934:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002a08 <_malloc_r+0xfc>
 8002938:	f000 f868 	bl	8002a0c <__malloc_lock>
 800293c:	f8d8 3000 	ldr.w	r3, [r8]
 8002940:	461c      	mov	r4, r3
 8002942:	bb5c      	cbnz	r4, 800299c <_malloc_r+0x90>
 8002944:	4629      	mov	r1, r5
 8002946:	4638      	mov	r0, r7
 8002948:	f7ff ffc0 	bl	80028cc <sbrk_aligned>
 800294c:	1c43      	adds	r3, r0, #1
 800294e:	4604      	mov	r4, r0
 8002950:	d155      	bne.n	80029fe <_malloc_r+0xf2>
 8002952:	f8d8 4000 	ldr.w	r4, [r8]
 8002956:	4626      	mov	r6, r4
 8002958:	2e00      	cmp	r6, #0
 800295a:	d145      	bne.n	80029e8 <_malloc_r+0xdc>
 800295c:	2c00      	cmp	r4, #0
 800295e:	d048      	beq.n	80029f2 <_malloc_r+0xe6>
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	4631      	mov	r1, r6
 8002964:	4638      	mov	r0, r7
 8002966:	eb04 0903 	add.w	r9, r4, r3
 800296a:	f000 f98d 	bl	8002c88 <_sbrk_r>
 800296e:	4581      	cmp	r9, r0
 8002970:	d13f      	bne.n	80029f2 <_malloc_r+0xe6>
 8002972:	6821      	ldr	r1, [r4, #0]
 8002974:	1a6d      	subs	r5, r5, r1
 8002976:	4629      	mov	r1, r5
 8002978:	4638      	mov	r0, r7
 800297a:	f7ff ffa7 	bl	80028cc <sbrk_aligned>
 800297e:	3001      	adds	r0, #1
 8002980:	d037      	beq.n	80029f2 <_malloc_r+0xe6>
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	442b      	add	r3, r5
 8002986:	6023      	str	r3, [r4, #0]
 8002988:	f8d8 3000 	ldr.w	r3, [r8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d038      	beq.n	8002a02 <_malloc_r+0xf6>
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	42a2      	cmp	r2, r4
 8002994:	d12b      	bne.n	80029ee <_malloc_r+0xe2>
 8002996:	2200      	movs	r2, #0
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	e00f      	b.n	80029bc <_malloc_r+0xb0>
 800299c:	6822      	ldr	r2, [r4, #0]
 800299e:	1b52      	subs	r2, r2, r5
 80029a0:	d41f      	bmi.n	80029e2 <_malloc_r+0xd6>
 80029a2:	2a0b      	cmp	r2, #11
 80029a4:	d917      	bls.n	80029d6 <_malloc_r+0xca>
 80029a6:	1961      	adds	r1, r4, r5
 80029a8:	42a3      	cmp	r3, r4
 80029aa:	6025      	str	r5, [r4, #0]
 80029ac:	bf18      	it	ne
 80029ae:	6059      	strne	r1, [r3, #4]
 80029b0:	6863      	ldr	r3, [r4, #4]
 80029b2:	bf08      	it	eq
 80029b4:	f8c8 1000 	streq.w	r1, [r8]
 80029b8:	5162      	str	r2, [r4, r5]
 80029ba:	604b      	str	r3, [r1, #4]
 80029bc:	4638      	mov	r0, r7
 80029be:	f104 060b 	add.w	r6, r4, #11
 80029c2:	f000 f829 	bl	8002a18 <__malloc_unlock>
 80029c6:	f026 0607 	bic.w	r6, r6, #7
 80029ca:	1d23      	adds	r3, r4, #4
 80029cc:	1af2      	subs	r2, r6, r3
 80029ce:	d0ae      	beq.n	800292e <_malloc_r+0x22>
 80029d0:	1b9b      	subs	r3, r3, r6
 80029d2:	50a3      	str	r3, [r4, r2]
 80029d4:	e7ab      	b.n	800292e <_malloc_r+0x22>
 80029d6:	42a3      	cmp	r3, r4
 80029d8:	6862      	ldr	r2, [r4, #4]
 80029da:	d1dd      	bne.n	8002998 <_malloc_r+0x8c>
 80029dc:	f8c8 2000 	str.w	r2, [r8]
 80029e0:	e7ec      	b.n	80029bc <_malloc_r+0xb0>
 80029e2:	4623      	mov	r3, r4
 80029e4:	6864      	ldr	r4, [r4, #4]
 80029e6:	e7ac      	b.n	8002942 <_malloc_r+0x36>
 80029e8:	4634      	mov	r4, r6
 80029ea:	6876      	ldr	r6, [r6, #4]
 80029ec:	e7b4      	b.n	8002958 <_malloc_r+0x4c>
 80029ee:	4613      	mov	r3, r2
 80029f0:	e7cc      	b.n	800298c <_malloc_r+0x80>
 80029f2:	230c      	movs	r3, #12
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4638      	mov	r0, r7
 80029f8:	f000 f80e 	bl	8002a18 <__malloc_unlock>
 80029fc:	e797      	b.n	800292e <_malloc_r+0x22>
 80029fe:	6025      	str	r5, [r4, #0]
 8002a00:	e7dc      	b.n	80029bc <_malloc_r+0xb0>
 8002a02:	605b      	str	r3, [r3, #4]
 8002a04:	deff      	udf	#255	; 0xff
 8002a06:	bf00      	nop
 8002a08:	20000214 	.word	0x20000214

08002a0c <__malloc_lock>:
 8002a0c:	4801      	ldr	r0, [pc, #4]	; (8002a14 <__malloc_lock+0x8>)
 8002a0e:	f7ff bf06 	b.w	800281e <__retarget_lock_acquire_recursive>
 8002a12:	bf00      	nop
 8002a14:	20000210 	.word	0x20000210

08002a18 <__malloc_unlock>:
 8002a18:	4801      	ldr	r0, [pc, #4]	; (8002a20 <__malloc_unlock+0x8>)
 8002a1a:	f7ff bf01 	b.w	8002820 <__retarget_lock_release_recursive>
 8002a1e:	bf00      	nop
 8002a20:	20000210 	.word	0x20000210

08002a24 <__sflush_r>:
 8002a24:	898a      	ldrh	r2, [r1, #12]
 8002a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a2a:	4605      	mov	r5, r0
 8002a2c:	0710      	lsls	r0, r2, #28
 8002a2e:	460c      	mov	r4, r1
 8002a30:	d458      	bmi.n	8002ae4 <__sflush_r+0xc0>
 8002a32:	684b      	ldr	r3, [r1, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	dc05      	bgt.n	8002a44 <__sflush_r+0x20>
 8002a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	dc02      	bgt.n	8002a44 <__sflush_r+0x20>
 8002a3e:	2000      	movs	r0, #0
 8002a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a46:	2e00      	cmp	r6, #0
 8002a48:	d0f9      	beq.n	8002a3e <__sflush_r+0x1a>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a50:	682f      	ldr	r7, [r5, #0]
 8002a52:	6a21      	ldr	r1, [r4, #32]
 8002a54:	602b      	str	r3, [r5, #0]
 8002a56:	d032      	beq.n	8002abe <__sflush_r+0x9a>
 8002a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
 8002a5c:	075a      	lsls	r2, r3, #29
 8002a5e:	d505      	bpl.n	8002a6c <__sflush_r+0x48>
 8002a60:	6863      	ldr	r3, [r4, #4]
 8002a62:	1ac0      	subs	r0, r0, r3
 8002a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a66:	b10b      	cbz	r3, 8002a6c <__sflush_r+0x48>
 8002a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a6a:	1ac0      	subs	r0, r0, r3
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	4602      	mov	r2, r0
 8002a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a72:	6a21      	ldr	r1, [r4, #32]
 8002a74:	4628      	mov	r0, r5
 8002a76:	47b0      	blx	r6
 8002a78:	1c43      	adds	r3, r0, #1
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	d106      	bne.n	8002a8c <__sflush_r+0x68>
 8002a7e:	6829      	ldr	r1, [r5, #0]
 8002a80:	291d      	cmp	r1, #29
 8002a82:	d82b      	bhi.n	8002adc <__sflush_r+0xb8>
 8002a84:	4a29      	ldr	r2, [pc, #164]	; (8002b2c <__sflush_r+0x108>)
 8002a86:	410a      	asrs	r2, r1
 8002a88:	07d6      	lsls	r6, r2, #31
 8002a8a:	d427      	bmi.n	8002adc <__sflush_r+0xb8>
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	6062      	str	r2, [r4, #4]
 8002a90:	04d9      	lsls	r1, r3, #19
 8002a92:	6922      	ldr	r2, [r4, #16]
 8002a94:	6022      	str	r2, [r4, #0]
 8002a96:	d504      	bpl.n	8002aa2 <__sflush_r+0x7e>
 8002a98:	1c42      	adds	r2, r0, #1
 8002a9a:	d101      	bne.n	8002aa0 <__sflush_r+0x7c>
 8002a9c:	682b      	ldr	r3, [r5, #0]
 8002a9e:	b903      	cbnz	r3, 8002aa2 <__sflush_r+0x7e>
 8002aa0:	6560      	str	r0, [r4, #84]	; 0x54
 8002aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002aa4:	602f      	str	r7, [r5, #0]
 8002aa6:	2900      	cmp	r1, #0
 8002aa8:	d0c9      	beq.n	8002a3e <__sflush_r+0x1a>
 8002aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002aae:	4299      	cmp	r1, r3
 8002ab0:	d002      	beq.n	8002ab8 <__sflush_r+0x94>
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f7ff feb6 	bl	8002824 <_free_r>
 8002ab8:	2000      	movs	r0, #0
 8002aba:	6360      	str	r0, [r4, #52]	; 0x34
 8002abc:	e7c0      	b.n	8002a40 <__sflush_r+0x1c>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	47b0      	blx	r6
 8002ac4:	1c41      	adds	r1, r0, #1
 8002ac6:	d1c8      	bne.n	8002a5a <__sflush_r+0x36>
 8002ac8:	682b      	ldr	r3, [r5, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0c5      	beq.n	8002a5a <__sflush_r+0x36>
 8002ace:	2b1d      	cmp	r3, #29
 8002ad0:	d001      	beq.n	8002ad6 <__sflush_r+0xb2>
 8002ad2:	2b16      	cmp	r3, #22
 8002ad4:	d101      	bne.n	8002ada <__sflush_r+0xb6>
 8002ad6:	602f      	str	r7, [r5, #0]
 8002ad8:	e7b1      	b.n	8002a3e <__sflush_r+0x1a>
 8002ada:	89a3      	ldrh	r3, [r4, #12]
 8002adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae0:	81a3      	strh	r3, [r4, #12]
 8002ae2:	e7ad      	b.n	8002a40 <__sflush_r+0x1c>
 8002ae4:	690f      	ldr	r7, [r1, #16]
 8002ae6:	2f00      	cmp	r7, #0
 8002ae8:	d0a9      	beq.n	8002a3e <__sflush_r+0x1a>
 8002aea:	0793      	lsls	r3, r2, #30
 8002aec:	680e      	ldr	r6, [r1, #0]
 8002aee:	bf08      	it	eq
 8002af0:	694b      	ldreq	r3, [r1, #20]
 8002af2:	600f      	str	r7, [r1, #0]
 8002af4:	bf18      	it	ne
 8002af6:	2300      	movne	r3, #0
 8002af8:	eba6 0807 	sub.w	r8, r6, r7
 8002afc:	608b      	str	r3, [r1, #8]
 8002afe:	f1b8 0f00 	cmp.w	r8, #0
 8002b02:	dd9c      	ble.n	8002a3e <__sflush_r+0x1a>
 8002b04:	6a21      	ldr	r1, [r4, #32]
 8002b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b08:	4643      	mov	r3, r8
 8002b0a:	463a      	mov	r2, r7
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	47b0      	blx	r6
 8002b10:	2800      	cmp	r0, #0
 8002b12:	dc06      	bgt.n	8002b22 <__sflush_r+0xfe>
 8002b14:	89a3      	ldrh	r3, [r4, #12]
 8002b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b1a:	81a3      	strh	r3, [r4, #12]
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	e78e      	b.n	8002a40 <__sflush_r+0x1c>
 8002b22:	4407      	add	r7, r0
 8002b24:	eba8 0800 	sub.w	r8, r8, r0
 8002b28:	e7e9      	b.n	8002afe <__sflush_r+0xda>
 8002b2a:	bf00      	nop
 8002b2c:	dfbffffe 	.word	0xdfbffffe

08002b30 <_fflush_r>:
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	690b      	ldr	r3, [r1, #16]
 8002b34:	4605      	mov	r5, r0
 8002b36:	460c      	mov	r4, r1
 8002b38:	b913      	cbnz	r3, 8002b40 <_fflush_r+0x10>
 8002b3a:	2500      	movs	r5, #0
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	bd38      	pop	{r3, r4, r5, pc}
 8002b40:	b118      	cbz	r0, 8002b4a <_fflush_r+0x1a>
 8002b42:	6a03      	ldr	r3, [r0, #32]
 8002b44:	b90b      	cbnz	r3, 8002b4a <_fflush_r+0x1a>
 8002b46:	f7ff fbd9 	bl	80022fc <__sinit>
 8002b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f3      	beq.n	8002b3a <_fflush_r+0xa>
 8002b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b54:	07d0      	lsls	r0, r2, #31
 8002b56:	d404      	bmi.n	8002b62 <_fflush_r+0x32>
 8002b58:	0599      	lsls	r1, r3, #22
 8002b5a:	d402      	bmi.n	8002b62 <_fflush_r+0x32>
 8002b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b5e:	f7ff fe5e 	bl	800281e <__retarget_lock_acquire_recursive>
 8002b62:	4628      	mov	r0, r5
 8002b64:	4621      	mov	r1, r4
 8002b66:	f7ff ff5d 	bl	8002a24 <__sflush_r>
 8002b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b6c:	07da      	lsls	r2, r3, #31
 8002b6e:	4605      	mov	r5, r0
 8002b70:	d4e4      	bmi.n	8002b3c <_fflush_r+0xc>
 8002b72:	89a3      	ldrh	r3, [r4, #12]
 8002b74:	059b      	lsls	r3, r3, #22
 8002b76:	d4e1      	bmi.n	8002b3c <_fflush_r+0xc>
 8002b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b7a:	f7ff fe51 	bl	8002820 <__retarget_lock_release_recursive>
 8002b7e:	e7dd      	b.n	8002b3c <_fflush_r+0xc>

08002b80 <__swhatbuf_r>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	460c      	mov	r4, r1
 8002b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b88:	2900      	cmp	r1, #0
 8002b8a:	b096      	sub	sp, #88	; 0x58
 8002b8c:	4615      	mov	r5, r2
 8002b8e:	461e      	mov	r6, r3
 8002b90:	da0d      	bge.n	8002bae <__swhatbuf_r+0x2e>
 8002b92:	89a3      	ldrh	r3, [r4, #12]
 8002b94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	bf0c      	ite	eq
 8002b9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002ba2:	2340      	movne	r3, #64	; 0x40
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	6031      	str	r1, [r6, #0]
 8002ba8:	602b      	str	r3, [r5, #0]
 8002baa:	b016      	add	sp, #88	; 0x58
 8002bac:	bd70      	pop	{r4, r5, r6, pc}
 8002bae:	466a      	mov	r2, sp
 8002bb0:	f000 f848 	bl	8002c44 <_fstat_r>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	dbec      	blt.n	8002b92 <__swhatbuf_r+0x12>
 8002bb8:	9901      	ldr	r1, [sp, #4]
 8002bba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002bbe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002bc2:	4259      	negs	r1, r3
 8002bc4:	4159      	adcs	r1, r3
 8002bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bca:	e7eb      	b.n	8002ba4 <__swhatbuf_r+0x24>

08002bcc <__smakebuf_r>:
 8002bcc:	898b      	ldrh	r3, [r1, #12]
 8002bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bd0:	079d      	lsls	r5, r3, #30
 8002bd2:	4606      	mov	r6, r0
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	d507      	bpl.n	8002be8 <__smakebuf_r+0x1c>
 8002bd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bdc:	6023      	str	r3, [r4, #0]
 8002bde:	6123      	str	r3, [r4, #16]
 8002be0:	2301      	movs	r3, #1
 8002be2:	6163      	str	r3, [r4, #20]
 8002be4:	b002      	add	sp, #8
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	ab01      	add	r3, sp, #4
 8002bea:	466a      	mov	r2, sp
 8002bec:	f7ff ffc8 	bl	8002b80 <__swhatbuf_r>
 8002bf0:	9900      	ldr	r1, [sp, #0]
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	f7ff fe89 	bl	800290c <_malloc_r>
 8002bfa:	b948      	cbnz	r0, 8002c10 <__smakebuf_r+0x44>
 8002bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c00:	059a      	lsls	r2, r3, #22
 8002c02:	d4ef      	bmi.n	8002be4 <__smakebuf_r+0x18>
 8002c04:	f023 0303 	bic.w	r3, r3, #3
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	81a3      	strh	r3, [r4, #12]
 8002c0e:	e7e3      	b.n	8002bd8 <__smakebuf_r+0xc>
 8002c10:	89a3      	ldrh	r3, [r4, #12]
 8002c12:	6020      	str	r0, [r4, #0]
 8002c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c18:	81a3      	strh	r3, [r4, #12]
 8002c1a:	9b00      	ldr	r3, [sp, #0]
 8002c1c:	6163      	str	r3, [r4, #20]
 8002c1e:	9b01      	ldr	r3, [sp, #4]
 8002c20:	6120      	str	r0, [r4, #16]
 8002c22:	b15b      	cbz	r3, 8002c3c <__smakebuf_r+0x70>
 8002c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c28:	4630      	mov	r0, r6
 8002c2a:	f000 f81d 	bl	8002c68 <_isatty_r>
 8002c2e:	b128      	cbz	r0, 8002c3c <__smakebuf_r+0x70>
 8002c30:	89a3      	ldrh	r3, [r4, #12]
 8002c32:	f023 0303 	bic.w	r3, r3, #3
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	81a3      	strh	r3, [r4, #12]
 8002c3c:	89a3      	ldrh	r3, [r4, #12]
 8002c3e:	431d      	orrs	r5, r3
 8002c40:	81a5      	strh	r5, [r4, #12]
 8002c42:	e7cf      	b.n	8002be4 <__smakebuf_r+0x18>

08002c44 <_fstat_r>:
 8002c44:	b538      	push	{r3, r4, r5, lr}
 8002c46:	4d07      	ldr	r5, [pc, #28]	; (8002c64 <_fstat_r+0x20>)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	f7fd fda0 	bl	8000796 <_fstat>
 8002c56:	1c43      	adds	r3, r0, #1
 8002c58:	d102      	bne.n	8002c60 <_fstat_r+0x1c>
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	b103      	cbz	r3, 8002c60 <_fstat_r+0x1c>
 8002c5e:	6023      	str	r3, [r4, #0]
 8002c60:	bd38      	pop	{r3, r4, r5, pc}
 8002c62:	bf00      	nop
 8002c64:	2000020c 	.word	0x2000020c

08002c68 <_isatty_r>:
 8002c68:	b538      	push	{r3, r4, r5, lr}
 8002c6a:	4d06      	ldr	r5, [pc, #24]	; (8002c84 <_isatty_r+0x1c>)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	4604      	mov	r4, r0
 8002c70:	4608      	mov	r0, r1
 8002c72:	602b      	str	r3, [r5, #0]
 8002c74:	f7fd fd9f 	bl	80007b6 <_isatty>
 8002c78:	1c43      	adds	r3, r0, #1
 8002c7a:	d102      	bne.n	8002c82 <_isatty_r+0x1a>
 8002c7c:	682b      	ldr	r3, [r5, #0]
 8002c7e:	b103      	cbz	r3, 8002c82 <_isatty_r+0x1a>
 8002c80:	6023      	str	r3, [r4, #0]
 8002c82:	bd38      	pop	{r3, r4, r5, pc}
 8002c84:	2000020c 	.word	0x2000020c

08002c88 <_sbrk_r>:
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	4d06      	ldr	r5, [pc, #24]	; (8002ca4 <_sbrk_r+0x1c>)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	4604      	mov	r4, r0
 8002c90:	4608      	mov	r0, r1
 8002c92:	602b      	str	r3, [r5, #0]
 8002c94:	f7fd fda8 	bl	80007e8 <_sbrk>
 8002c98:	1c43      	adds	r3, r0, #1
 8002c9a:	d102      	bne.n	8002ca2 <_sbrk_r+0x1a>
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	b103      	cbz	r3, 8002ca2 <_sbrk_r+0x1a>
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	bd38      	pop	{r3, r4, r5, pc}
 8002ca4:	2000020c 	.word	0x2000020c

08002ca8 <_init>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	bf00      	nop
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr

08002cb4 <_fini>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	bf00      	nop
 8002cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cba:	bc08      	pop	{r3}
 8002cbc:	469e      	mov	lr, r3
 8002cbe:	4770      	bx	lr
